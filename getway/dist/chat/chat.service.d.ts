import { OnModuleInit } from '@nestjs/common';
export declare class ChatService implements OnModuleInit {
    private chatServiceClient;
    onModuleInit(): Promise<void>;
    sendMessage(request: any, token?: string): Promise<any>;
    editMessage(request: any, token?: string): Promise<any>;
    deleteMessage(request: any, token?: string): Promise<any>;
    getChatHistory(request: any, token?: string): Promise<any>;
    markAsRead(request: any, token?: string): Promise<any>;
    searchMessages(request: any, token?: string): Promise<any>;
    forwardMessage(request: any, token?: string): Promise<any>;
    pinMessage(request: any, token?: string): Promise<any>;
    unpinMessage(request: any, token?: string): Promise<any>;
    getPinnedMessages(request: any, token?: string): Promise<any>;
    addLikeMessage(request: any, token?: string): Promise<any>;
    updateLikedMessage(request: any, token?: string): Promise<any>;
    getLikedMessages(request: any, token?: string): Promise<any>;
    getLastMessages(request: any, token?: string): Promise<any>;
    getUsersByUserEmail(request: any, token?: string): Promise<any>;
    getUsersInGroup(request: any, token?: string): Promise<any>;
    getUserStatus(request: any, token?: string): Promise<any>;
    createGroup(request: any, token?: string): Promise<any>;
    joinGroup(request: any, token?: string): Promise<any>;
    leaveGroup(request: any, token?: string): Promise<any>;
    updateGroup(request: any, token?: string): Promise<any>;
    getAllGroupsByUserEmail(request: any, token?: string): Promise<any>;
    initiateCall(request: any, token?: string): Promise<any>;
    acceptCall(request: any, token?: string): Promise<any>;
    rejectCall(request: any, token?: string): Promise<any>;
    endCall(request: any, token?: string): Promise<any>;
    getCallHistory(request: any, token?: string): Promise<any>;
    addNotification(request: any, token?: string): Promise<any>;
    updateNotification(request: any, token?: string): Promise<any>;
    getNotification(request: any, token?: string): Promise<any>;
    markNotificationAsRead(request: any, token?: string): Promise<any>;
    getUnreadNotificationCount(request: any, token?: string): Promise<any>;
    addScheduleMessage(request: any, token?: string): Promise<any>;
    updateScheduleMessage(request: any, token?: string): Promise<any>;
    cancelScheduledMessage(request: any, token?: string): Promise<any>;
    getScheduledMessages(request: any, token?: string): Promise<any>;
}
