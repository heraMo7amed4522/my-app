import { ChatService } from './chat.service';
import { SendMessageResponse, GetChatHistoryResponse, StandardResponse, GetUsersByUserEmailResponse, CreateGroupResponse, GetAllGroupsByUserEmailResponse, InitiateCallResponse, GetCallHistoryResponse, AddNotificationResponse, GetUnreadNotificationCountResponse, AddScheduleMessageResponse, GetScheduledMessagesResponse, SendMessageInput, EditMessageInput, DeleteMessageInput, GetChatHistoryInput, CreateGroupInput, UpdateGroupInput, InitiateCallInput, NotificationInput, AddScheduleMessageInput, UpdateScheduleMessageInput, ReactionType } from './chat.types';
export declare class ChatResolver {
    private readonly chatService;
    constructor(chatService: ChatService);
    sendMessage(input: SendMessageInput, context: any): Promise<SendMessageResponse>;
    editMessage(input: EditMessageInput, context: any): Promise<StandardResponse>;
    deleteMessage(input: DeleteMessageInput, context: any): Promise<StandardResponse>;
    getChatHistory(input: GetChatHistoryInput, context: any): Promise<GetChatHistoryResponse>;
    markAsRead(userId: string, peerId: string, isGroup: boolean, context: any): Promise<StandardResponse>;
    searchMessages(userId: string, query: string, peerId?: string, groupId?: string, isGroup?: boolean, limit?: number, offset?: number, context?: any): Promise<GetChatHistoryResponse>;
    forwardMessage(messageId: string, senderId: string, receiverIds: string[], groupIds: string[], context: any): Promise<GetChatHistoryResponse>;
    pinMessage(messageId: string, userId: string, chatId: string, isGroup: boolean, context: any): Promise<StandardResponse>;
    unpinMessage(messageId: string, userId: string, chatId: string, isGroup: boolean, context: any): Promise<StandardResponse>;
    getPinnedMessages(chatId: string, isGroup: boolean, context: any): Promise<GetChatHistoryResponse>;
    addLikeMessage(messageId: string, userId: string, context: any): Promise<StandardResponse>;
    updateLikedMessage(messageId: string, userId: string, reactionType: ReactionType, context: any): Promise<StandardResponse>;
    getLikedMessages(userId: string, context: any): Promise<GetChatHistoryResponse>;
    getLastMessages(userId: string, context: any): Promise<GetChatHistoryResponse>;
    getUsersByUserEmail(userEmails: string[], context: any): Promise<GetUsersByUserEmailResponse>;
    getUsersInGroup(groupId: string, context: any): Promise<GetUsersByUserEmailResponse>;
    createGroup(input: CreateGroupInput, context: any): Promise<CreateGroupResponse>;
    joinGroup(userId: string, groupId: string, context: any): Promise<StandardResponse>;
    leaveGroup(userId: string, groupId: string, context: any): Promise<StandardResponse>;
    updateGroup(input: UpdateGroupInput, context: any): Promise<CreateGroupResponse>;
    getAllGroupsByUserEmail(userEmail: string, context: any): Promise<GetAllGroupsByUserEmailResponse>;
    initiateCall(input: InitiateCallInput, context: any): Promise<InitiateCallResponse>;
    acceptCall(callId: string, userId: string, context: any): Promise<InitiateCallResponse>;
    rejectCall(callId: string, userId: string, context: any): Promise<StandardResponse>;
    endCall(callId: string, userId: string, context: any): Promise<InitiateCallResponse>;
    getCallHistory(userId: string, limit?: number, offset?: number, context?: any): Promise<GetCallHistoryResponse>;
    addNotification(notification: NotificationInput, context: any): Promise<AddNotificationResponse>;
    updateNotification(notification: NotificationInput, context: any): Promise<AddNotificationResponse>;
    getNotification(notificationId: string, userId: string, context: any): Promise<AddNotificationResponse>;
    markNotificationAsRead(notificationId: string, userId: string, context: any): Promise<StandardResponse>;
    getUnreadNotificationCount(userId: string, context: any): Promise<GetUnreadNotificationCountResponse>;
    addScheduleMessage(input: AddScheduleMessageInput, context: any): Promise<AddScheduleMessageResponse>;
    updateScheduleMessage(input: UpdateScheduleMessageInput, context: any): Promise<StandardResponse>;
    cancelScheduledMessage(scheduledMessageId: string, userId: string, context: any): Promise<StandardResponse>;
    getScheduledMessages(userId: string, chatId?: string, context?: any): Promise<GetScheduledMessagesResponse>;
}
