// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/history_template.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HistoryTemplateService_GetTemplateByID_FullMethodName          = "/history_templates.HistoryTemplateService/GetTemplateByID"
	HistoryTemplateService_GetAllTemplates_FullMethodName          = "/history_templates.HistoryTemplateService/GetAllTemplates"
	HistoryTemplateService_GetTemplatesByEra_FullMethodName        = "/history_templates.HistoryTemplateService/GetTemplatesByEra"
	HistoryTemplateService_GetTemplatesByDynasty_FullMethodName    = "/history_templates.HistoryTemplateService/GetTemplatesByDynasty"
	HistoryTemplateService_GetTemplatesByPharaoh_FullMethodName    = "/history_templates.HistoryTemplateService/GetTemplatesByPharaoh"
	HistoryTemplateService_GetTemplatesByDifficulty_FullMethodName = "/history_templates.HistoryTemplateService/GetTemplatesByDifficulty"
	HistoryTemplateService_SearchTemplates_FullMethodName          = "/history_templates.HistoryTemplateService/SearchTemplates"
	HistoryTemplateService_CreateTemplate_FullMethodName           = "/history_templates.HistoryTemplateService/CreateTemplate"
	HistoryTemplateService_UpdateTemplate_FullMethodName           = "/history_templates.HistoryTemplateService/UpdateTemplate"
	HistoryTemplateService_DeleteTemplate_FullMethodName           = "/history_templates.HistoryTemplateService/DeleteTemplate"
	HistoryTemplateService_GetTemplatesByTag_FullMethodName        = "/history_templates.HistoryTemplateService/GetTemplatesByTag"
	HistoryTemplateService_GetRelatedTemplates_FullMethodName      = "/history_templates.HistoryTemplateService/GetRelatedTemplates"
)

// HistoryTemplateServiceClient is the client API for HistoryTemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryTemplateServiceClient interface {
	GetTemplateByID(ctx context.Context, in *GetTemplateByIDRequest, opts ...grpc.CallOption) (*GetTemplateByIDResponse, error)
	GetAllTemplates(ctx context.Context, in *GetAllTemplatesRequest, opts ...grpc.CallOption) (*GetAllTemplatesResponse, error)
	GetTemplatesByEra(ctx context.Context, in *GetTemplatesByEraRequest, opts ...grpc.CallOption) (*GetTemplatesByEraResponse, error)
	GetTemplatesByDynasty(ctx context.Context, in *GetTemplatesByDynastyRequest, opts ...grpc.CallOption) (*GetTemplatesByDynastyResponse, error)
	GetTemplatesByPharaoh(ctx context.Context, in *GetTemplatesByPharaohRequest, opts ...grpc.CallOption) (*GetTemplatesByPharaohResponse, error)
	GetTemplatesByDifficulty(ctx context.Context, in *GetTemplatesByDifficultyRequest, opts ...grpc.CallOption) (*GetTemplatesByDifficultyResponse, error)
	SearchTemplates(ctx context.Context, in *SearchTemplatesRequest, opts ...grpc.CallOption) (*SearchTemplatesResponse, error)
	CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*CreateTemplateResponse, error)
	UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*UpdateTemplateResponse, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error)
	GetTemplatesByTag(ctx context.Context, in *GetTemplatesByTagRequest, opts ...grpc.CallOption) (*GetTemplatesByTagResponse, error)
	GetRelatedTemplates(ctx context.Context, in *GetRelatedTemplatesRequest, opts ...grpc.CallOption) (*GetRelatedTemplatesResponse, error)
}

type historyTemplateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryTemplateServiceClient(cc grpc.ClientConnInterface) HistoryTemplateServiceClient {
	return &historyTemplateServiceClient{cc}
}

func (c *historyTemplateServiceClient) GetTemplateByID(ctx context.Context, in *GetTemplateByIDRequest, opts ...grpc.CallOption) (*GetTemplateByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemplateByIDResponse)
	err := c.cc.Invoke(ctx, HistoryTemplateService_GetTemplateByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyTemplateServiceClient) GetAllTemplates(ctx context.Context, in *GetAllTemplatesRequest, opts ...grpc.CallOption) (*GetAllTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllTemplatesResponse)
	err := c.cc.Invoke(ctx, HistoryTemplateService_GetAllTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyTemplateServiceClient) GetTemplatesByEra(ctx context.Context, in *GetTemplatesByEraRequest, opts ...grpc.CallOption) (*GetTemplatesByEraResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemplatesByEraResponse)
	err := c.cc.Invoke(ctx, HistoryTemplateService_GetTemplatesByEra_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyTemplateServiceClient) GetTemplatesByDynasty(ctx context.Context, in *GetTemplatesByDynastyRequest, opts ...grpc.CallOption) (*GetTemplatesByDynastyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemplatesByDynastyResponse)
	err := c.cc.Invoke(ctx, HistoryTemplateService_GetTemplatesByDynasty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyTemplateServiceClient) GetTemplatesByPharaoh(ctx context.Context, in *GetTemplatesByPharaohRequest, opts ...grpc.CallOption) (*GetTemplatesByPharaohResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemplatesByPharaohResponse)
	err := c.cc.Invoke(ctx, HistoryTemplateService_GetTemplatesByPharaoh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyTemplateServiceClient) GetTemplatesByDifficulty(ctx context.Context, in *GetTemplatesByDifficultyRequest, opts ...grpc.CallOption) (*GetTemplatesByDifficultyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemplatesByDifficultyResponse)
	err := c.cc.Invoke(ctx, HistoryTemplateService_GetTemplatesByDifficulty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyTemplateServiceClient) SearchTemplates(ctx context.Context, in *SearchTemplatesRequest, opts ...grpc.CallOption) (*SearchTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchTemplatesResponse)
	err := c.cc.Invoke(ctx, HistoryTemplateService_SearchTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyTemplateServiceClient) CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*CreateTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTemplateResponse)
	err := c.cc.Invoke(ctx, HistoryTemplateService_CreateTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyTemplateServiceClient) UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*UpdateTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTemplateResponse)
	err := c.cc.Invoke(ctx, HistoryTemplateService_UpdateTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyTemplateServiceClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTemplateResponse)
	err := c.cc.Invoke(ctx, HistoryTemplateService_DeleteTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyTemplateServiceClient) GetTemplatesByTag(ctx context.Context, in *GetTemplatesByTagRequest, opts ...grpc.CallOption) (*GetTemplatesByTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemplatesByTagResponse)
	err := c.cc.Invoke(ctx, HistoryTemplateService_GetTemplatesByTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyTemplateServiceClient) GetRelatedTemplates(ctx context.Context, in *GetRelatedTemplatesRequest, opts ...grpc.CallOption) (*GetRelatedTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRelatedTemplatesResponse)
	err := c.cc.Invoke(ctx, HistoryTemplateService_GetRelatedTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryTemplateServiceServer is the server API for HistoryTemplateService service.
// All implementations must embed UnimplementedHistoryTemplateServiceServer
// for forward compatibility.
type HistoryTemplateServiceServer interface {
	GetTemplateByID(context.Context, *GetTemplateByIDRequest) (*GetTemplateByIDResponse, error)
	GetAllTemplates(context.Context, *GetAllTemplatesRequest) (*GetAllTemplatesResponse, error)
	GetTemplatesByEra(context.Context, *GetTemplatesByEraRequest) (*GetTemplatesByEraResponse, error)
	GetTemplatesByDynasty(context.Context, *GetTemplatesByDynastyRequest) (*GetTemplatesByDynastyResponse, error)
	GetTemplatesByPharaoh(context.Context, *GetTemplatesByPharaohRequest) (*GetTemplatesByPharaohResponse, error)
	GetTemplatesByDifficulty(context.Context, *GetTemplatesByDifficultyRequest) (*GetTemplatesByDifficultyResponse, error)
	SearchTemplates(context.Context, *SearchTemplatesRequest) (*SearchTemplatesResponse, error)
	CreateTemplate(context.Context, *CreateTemplateRequest) (*CreateTemplateResponse, error)
	UpdateTemplate(context.Context, *UpdateTemplateRequest) (*UpdateTemplateResponse, error)
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error)
	GetTemplatesByTag(context.Context, *GetTemplatesByTagRequest) (*GetTemplatesByTagResponse, error)
	GetRelatedTemplates(context.Context, *GetRelatedTemplatesRequest) (*GetRelatedTemplatesResponse, error)
	mustEmbedUnimplementedHistoryTemplateServiceServer()
}

// UnimplementedHistoryTemplateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHistoryTemplateServiceServer struct{}

func (UnimplementedHistoryTemplateServiceServer) GetTemplateByID(context.Context, *GetTemplateByIDRequest) (*GetTemplateByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateByID not implemented")
}
func (UnimplementedHistoryTemplateServiceServer) GetAllTemplates(context.Context, *GetAllTemplatesRequest) (*GetAllTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTemplates not implemented")
}
func (UnimplementedHistoryTemplateServiceServer) GetTemplatesByEra(context.Context, *GetTemplatesByEraRequest) (*GetTemplatesByEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplatesByEra not implemented")
}
func (UnimplementedHistoryTemplateServiceServer) GetTemplatesByDynasty(context.Context, *GetTemplatesByDynastyRequest) (*GetTemplatesByDynastyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplatesByDynasty not implemented")
}
func (UnimplementedHistoryTemplateServiceServer) GetTemplatesByPharaoh(context.Context, *GetTemplatesByPharaohRequest) (*GetTemplatesByPharaohResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplatesByPharaoh not implemented")
}
func (UnimplementedHistoryTemplateServiceServer) GetTemplatesByDifficulty(context.Context, *GetTemplatesByDifficultyRequest) (*GetTemplatesByDifficultyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplatesByDifficulty not implemented")
}
func (UnimplementedHistoryTemplateServiceServer) SearchTemplates(context.Context, *SearchTemplatesRequest) (*SearchTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTemplates not implemented")
}
func (UnimplementedHistoryTemplateServiceServer) CreateTemplate(context.Context, *CreateTemplateRequest) (*CreateTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedHistoryTemplateServiceServer) UpdateTemplate(context.Context, *UpdateTemplateRequest) (*UpdateTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedHistoryTemplateServiceServer) DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedHistoryTemplateServiceServer) GetTemplatesByTag(context.Context, *GetTemplatesByTagRequest) (*GetTemplatesByTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplatesByTag not implemented")
}
func (UnimplementedHistoryTemplateServiceServer) GetRelatedTemplates(context.Context, *GetRelatedTemplatesRequest) (*GetRelatedTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelatedTemplates not implemented")
}
func (UnimplementedHistoryTemplateServiceServer) mustEmbedUnimplementedHistoryTemplateServiceServer() {
}
func (UnimplementedHistoryTemplateServiceServer) testEmbeddedByValue() {}

// UnsafeHistoryTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryTemplateServiceServer will
// result in compilation errors.
type UnsafeHistoryTemplateServiceServer interface {
	mustEmbedUnimplementedHistoryTemplateServiceServer()
}

func RegisterHistoryTemplateServiceServer(s grpc.ServiceRegistrar, srv HistoryTemplateServiceServer) {
	// If the following call pancis, it indicates UnimplementedHistoryTemplateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HistoryTemplateService_ServiceDesc, srv)
}

func _HistoryTemplateService_GetTemplateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryTemplateServiceServer).GetTemplateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryTemplateService_GetTemplateByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryTemplateServiceServer).GetTemplateByID(ctx, req.(*GetTemplateByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryTemplateService_GetAllTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryTemplateServiceServer).GetAllTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryTemplateService_GetAllTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryTemplateServiceServer).GetAllTemplates(ctx, req.(*GetAllTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryTemplateService_GetTemplatesByEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplatesByEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryTemplateServiceServer).GetTemplatesByEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryTemplateService_GetTemplatesByEra_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryTemplateServiceServer).GetTemplatesByEra(ctx, req.(*GetTemplatesByEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryTemplateService_GetTemplatesByDynasty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplatesByDynastyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryTemplateServiceServer).GetTemplatesByDynasty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryTemplateService_GetTemplatesByDynasty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryTemplateServiceServer).GetTemplatesByDynasty(ctx, req.(*GetTemplatesByDynastyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryTemplateService_GetTemplatesByPharaoh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplatesByPharaohRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryTemplateServiceServer).GetTemplatesByPharaoh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryTemplateService_GetTemplatesByPharaoh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryTemplateServiceServer).GetTemplatesByPharaoh(ctx, req.(*GetTemplatesByPharaohRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryTemplateService_GetTemplatesByDifficulty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplatesByDifficultyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryTemplateServiceServer).GetTemplatesByDifficulty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryTemplateService_GetTemplatesByDifficulty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryTemplateServiceServer).GetTemplatesByDifficulty(ctx, req.(*GetTemplatesByDifficultyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryTemplateService_SearchTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryTemplateServiceServer).SearchTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryTemplateService_SearchTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryTemplateServiceServer).SearchTemplates(ctx, req.(*SearchTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryTemplateService_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryTemplateServiceServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryTemplateService_CreateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryTemplateServiceServer).CreateTemplate(ctx, req.(*CreateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryTemplateService_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryTemplateServiceServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryTemplateService_UpdateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryTemplateServiceServer).UpdateTemplate(ctx, req.(*UpdateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryTemplateService_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryTemplateServiceServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryTemplateService_DeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryTemplateServiceServer).DeleteTemplate(ctx, req.(*DeleteTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryTemplateService_GetTemplatesByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplatesByTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryTemplateServiceServer).GetTemplatesByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryTemplateService_GetTemplatesByTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryTemplateServiceServer).GetTemplatesByTag(ctx, req.(*GetTemplatesByTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryTemplateService_GetRelatedTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelatedTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryTemplateServiceServer).GetRelatedTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryTemplateService_GetRelatedTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryTemplateServiceServer).GetRelatedTemplates(ctx, req.(*GetRelatedTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoryTemplateService_ServiceDesc is the grpc.ServiceDesc for HistoryTemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryTemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "history_templates.HistoryTemplateService",
	HandlerType: (*HistoryTemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTemplateByID",
			Handler:    _HistoryTemplateService_GetTemplateByID_Handler,
		},
		{
			MethodName: "GetAllTemplates",
			Handler:    _HistoryTemplateService_GetAllTemplates_Handler,
		},
		{
			MethodName: "GetTemplatesByEra",
			Handler:    _HistoryTemplateService_GetTemplatesByEra_Handler,
		},
		{
			MethodName: "GetTemplatesByDynasty",
			Handler:    _HistoryTemplateService_GetTemplatesByDynasty_Handler,
		},
		{
			MethodName: "GetTemplatesByPharaoh",
			Handler:    _HistoryTemplateService_GetTemplatesByPharaoh_Handler,
		},
		{
			MethodName: "GetTemplatesByDifficulty",
			Handler:    _HistoryTemplateService_GetTemplatesByDifficulty_Handler,
		},
		{
			MethodName: "SearchTemplates",
			Handler:    _HistoryTemplateService_SearchTemplates_Handler,
		},
		{
			MethodName: "CreateTemplate",
			Handler:    _HistoryTemplateService_CreateTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _HistoryTemplateService_UpdateTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _HistoryTemplateService_DeleteTemplate_Handler,
		},
		{
			MethodName: "GetTemplatesByTag",
			Handler:    _HistoryTemplateService_GetTemplatesByTag_Handler,
		},
		{
			MethodName: "GetRelatedTemplates",
			Handler:    _HistoryTemplateService_GetRelatedTemplates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/history_template.proto",
}
