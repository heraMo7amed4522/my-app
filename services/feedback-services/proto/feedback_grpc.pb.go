// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/feedback.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeedbackService_SubmitFeedback_FullMethodName        = "/feedback.FeedbackService/SubmitFeedback"
	FeedbackService_GetTemplateFeedback_FullMethodName   = "/feedback.FeedbackService/GetTemplateFeedback"
	FeedbackService_GetFeedbackStatistics_FullMethodName = "/feedback.FeedbackService/GetFeedbackStatistics"
	FeedbackService_UpdateFeedback_FullMethodName        = "/feedback.FeedbackService/UpdateFeedback"
	FeedbackService_DeleteFeedback_FullMethodName        = "/feedback.FeedbackService/DeleteFeedback"
)

// FeedbackServiceClient is the client API for FeedbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedbackServiceClient interface {
	SubmitFeedback(ctx context.Context, in *SubmitFeedbackRequest, opts ...grpc.CallOption) (*SubmitFeedbackResponse, error)
	GetTemplateFeedback(ctx context.Context, in *GetTemplateFeedbackRequest, opts ...grpc.CallOption) (*GetTemplateFeedbackResponse, error)
	GetFeedbackStatistics(ctx context.Context, in *GetFeedbackStatisticsRequest, opts ...grpc.CallOption) (*GetFeedbackStatisticsResponse, error)
	UpdateFeedback(ctx context.Context, in *UpdateFeedbackRequest, opts ...grpc.CallOption) (*UpdateFeedbackResponse, error)
	DeleteFeedback(ctx context.Context, in *DeleteFeedbackRequest, opts ...grpc.CallOption) (*DeleteFeedbackResponse, error)
}

type feedbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedbackServiceClient(cc grpc.ClientConnInterface) FeedbackServiceClient {
	return &feedbackServiceClient{cc}
}

func (c *feedbackServiceClient) SubmitFeedback(ctx context.Context, in *SubmitFeedbackRequest, opts ...grpc.CallOption) (*SubmitFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitFeedbackResponse)
	err := c.cc.Invoke(ctx, FeedbackService_SubmitFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) GetTemplateFeedback(ctx context.Context, in *GetTemplateFeedbackRequest, opts ...grpc.CallOption) (*GetTemplateFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemplateFeedbackResponse)
	err := c.cc.Invoke(ctx, FeedbackService_GetTemplateFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) GetFeedbackStatistics(ctx context.Context, in *GetFeedbackStatisticsRequest, opts ...grpc.CallOption) (*GetFeedbackStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedbackStatisticsResponse)
	err := c.cc.Invoke(ctx, FeedbackService_GetFeedbackStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) UpdateFeedback(ctx context.Context, in *UpdateFeedbackRequest, opts ...grpc.CallOption) (*UpdateFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFeedbackResponse)
	err := c.cc.Invoke(ctx, FeedbackService_UpdateFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) DeleteFeedback(ctx context.Context, in *DeleteFeedbackRequest, opts ...grpc.CallOption) (*DeleteFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFeedbackResponse)
	err := c.cc.Invoke(ctx, FeedbackService_DeleteFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedbackServiceServer is the server API for FeedbackService service.
// All implementations must embed UnimplementedFeedbackServiceServer
// for forward compatibility.
type FeedbackServiceServer interface {
	SubmitFeedback(context.Context, *SubmitFeedbackRequest) (*SubmitFeedbackResponse, error)
	GetTemplateFeedback(context.Context, *GetTemplateFeedbackRequest) (*GetTemplateFeedbackResponse, error)
	GetFeedbackStatistics(context.Context, *GetFeedbackStatisticsRequest) (*GetFeedbackStatisticsResponse, error)
	UpdateFeedback(context.Context, *UpdateFeedbackRequest) (*UpdateFeedbackResponse, error)
	DeleteFeedback(context.Context, *DeleteFeedbackRequest) (*DeleteFeedbackResponse, error)
	mustEmbedUnimplementedFeedbackServiceServer()
}

// UnimplementedFeedbackServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeedbackServiceServer struct{}

func (UnimplementedFeedbackServiceServer) SubmitFeedback(context.Context, *SubmitFeedbackRequest) (*SubmitFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFeedback not implemented")
}
func (UnimplementedFeedbackServiceServer) GetTemplateFeedback(context.Context, *GetTemplateFeedbackRequest) (*GetTemplateFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateFeedback not implemented")
}
func (UnimplementedFeedbackServiceServer) GetFeedbackStatistics(context.Context, *GetFeedbackStatisticsRequest) (*GetFeedbackStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedbackStatistics not implemented")
}
func (UnimplementedFeedbackServiceServer) UpdateFeedback(context.Context, *UpdateFeedbackRequest) (*UpdateFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedback not implemented")
}
func (UnimplementedFeedbackServiceServer) DeleteFeedback(context.Context, *DeleteFeedbackRequest) (*DeleteFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeedback not implemented")
}
func (UnimplementedFeedbackServiceServer) mustEmbedUnimplementedFeedbackServiceServer() {}
func (UnimplementedFeedbackServiceServer) testEmbeddedByValue()                         {}

// UnsafeFeedbackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedbackServiceServer will
// result in compilation errors.
type UnsafeFeedbackServiceServer interface {
	mustEmbedUnimplementedFeedbackServiceServer()
}

func RegisterFeedbackServiceServer(s grpc.ServiceRegistrar, srv FeedbackServiceServer) {
	// If the following call pancis, it indicates UnimplementedFeedbackServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeedbackService_ServiceDesc, srv)
}

func _FeedbackService_SubmitFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).SubmitFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackService_SubmitFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).SubmitFeedback(ctx, req.(*SubmitFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_GetTemplateFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).GetTemplateFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackService_GetTemplateFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).GetTemplateFeedback(ctx, req.(*GetTemplateFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_GetFeedbackStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedbackStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).GetFeedbackStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackService_GetFeedbackStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).GetFeedbackStatistics(ctx, req.(*GetFeedbackStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_UpdateFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).UpdateFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackService_UpdateFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).UpdateFeedback(ctx, req.(*UpdateFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_DeleteFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).DeleteFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackService_DeleteFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).DeleteFeedback(ctx, req.(*DeleteFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedbackService_ServiceDesc is the grpc.ServiceDesc for FeedbackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedbackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feedback.FeedbackService",
	HandlerType: (*FeedbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitFeedback",
			Handler:    _FeedbackService_SubmitFeedback_Handler,
		},
		{
			MethodName: "GetTemplateFeedback",
			Handler:    _FeedbackService_GetTemplateFeedback_Handler,
		},
		{
			MethodName: "GetFeedbackStatistics",
			Handler:    _FeedbackService_GetFeedbackStatistics_Handler,
		},
		{
			MethodName: "UpdateFeedback",
			Handler:    _FeedbackService_UpdateFeedback_Handler,
		},
		{
			MethodName: "DeleteFeedback",
			Handler:    _FeedbackService_DeleteFeedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/feedback.proto",
}
