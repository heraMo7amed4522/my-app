// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: proto/chat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatService_ChatStream_FullMethodName                  = "/chat.ChatService/ChatStream"
	ChatService_SubscribeToLastMessages_FullMethodName     = "/chat.ChatService/SubscribeToLastMessages"
	ChatService_SubscribeToUserStatus_FullMethodName       = "/chat.ChatService/SubscribeToUserStatus"
	ChatService_SubscribeToTypingIndicators_FullMethodName = "/chat.ChatService/SubscribeToTypingIndicators"
	ChatService_SubscribeToNotifications_FullMethodName    = "/chat.ChatService/SubscribeToNotifications"
	ChatService_VideoCallStream_FullMethodName             = "/chat.ChatService/VideoCallStream"
	ChatService_PhoneCallStream_FullMethodName             = "/chat.ChatService/PhoneCallStream"
	ChatService_SubscribeToCallUpdates_FullMethodName      = "/chat.ChatService/SubscribeToCallUpdates"
	ChatService_SubscribeToCallSignaling_FullMethodName    = "/chat.ChatService/SubscribeToCallSignaling"
	ChatService_SendMessage_FullMethodName                 = "/chat.ChatService/SendMessage"
	ChatService_EditMessage_FullMethodName                 = "/chat.ChatService/EditMessage"
	ChatService_DeleteMessage_FullMethodName               = "/chat.ChatService/DeleteMessage"
	ChatService_GetChatHistory_FullMethodName              = "/chat.ChatService/GetChatHistory"
	ChatService_MarkAsRead_FullMethodName                  = "/chat.ChatService/MarkAsRead"
	ChatService_SearchMessages_FullMethodName              = "/chat.ChatService/SearchMessages"
	ChatService_ForwardMessage_FullMethodName              = "/chat.ChatService/ForwardMessage"
	ChatService_PinMessage_FullMethodName                  = "/chat.ChatService/PinMessage"
	ChatService_UnpinMessage_FullMethodName                = "/chat.ChatService/UnpinMessage"
	ChatService_GetPinnedMessages_FullMethodName           = "/chat.ChatService/GetPinnedMessages"
	ChatService_AddLikeMessage_FullMethodName              = "/chat.ChatService/AddLikeMessage"
	ChatService_UpdateLikedMessage_FullMethodName          = "/chat.ChatService/UpdateLikedMessage"
	ChatService_GetLikedMessages_FullMethodName            = "/chat.ChatService/GetLikedMessages"
	ChatService_GetLastMessages_FullMethodName             = "/chat.ChatService/GetLastMessages"
	ChatService_GetUsersByUserEmail_FullMethodName         = "/chat.ChatService/GetUsersByUserEmail"
	ChatService_GetUsersInGroup_FullMethodName             = "/chat.ChatService/GetUsersInGroup"
	ChatService_GetUserStatus_FullMethodName               = "/chat.ChatService/GetUserStatus"
	ChatService_CreateGroup_FullMethodName                 = "/chat.ChatService/CreateGroup"
	ChatService_JoinGroup_FullMethodName                   = "/chat.ChatService/JoinGroup"
	ChatService_LeaveGroup_FullMethodName                  = "/chat.ChatService/LeaveGroup"
	ChatService_UpdateGroup_FullMethodName                 = "/chat.ChatService/UpdateGroup"
	ChatService_GetAllGroupsByUserEmail_FullMethodName     = "/chat.ChatService/GetAllGroupsByUserEmail"
	ChatService_InitiateCall_FullMethodName                = "/chat.ChatService/InitiateCall"
	ChatService_AcceptCall_FullMethodName                  = "/chat.ChatService/AcceptCall"
	ChatService_RejectCall_FullMethodName                  = "/chat.ChatService/RejectCall"
	ChatService_EndCall_FullMethodName                     = "/chat.ChatService/EndCall"
	ChatService_GetCallHistory_FullMethodName              = "/chat.ChatService/GetCallHistory"
	ChatService_AddNotification_FullMethodName             = "/chat.ChatService/AddNotification"
	ChatService_UpdateNotification_FullMethodName          = "/chat.ChatService/UpdateNotification"
	ChatService_GetNotification_FullMethodName             = "/chat.ChatService/GetNotification"
	ChatService_MarkNotificationAsRead_FullMethodName      = "/chat.ChatService/MarkNotificationAsRead"
	ChatService_GetUnreadNotificationCount_FullMethodName  = "/chat.ChatService/GetUnreadNotificationCount"
	ChatService_AddScheduleMessage_FullMethodName          = "/chat.ChatService/AddScheduleMessage"
	ChatService_UpdateScheduleMessage_FullMethodName       = "/chat.ChatService/UpdateScheduleMessage"
	ChatService_CancelScheduledMessage_FullMethodName      = "/chat.ChatService/CancelScheduledMessage"
	ChatService_GetScheduledMessages_FullMethodName        = "/chat.ChatService/GetScheduledMessages"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	// ================================================ STREAMING =======================================
	ChatStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatStreamClient, error)
	SubscribeToLastMessages(ctx context.Context, in *LastMessageStreamRequest, opts ...grpc.CallOption) (ChatService_SubscribeToLastMessagesClient, error)
	SubscribeToUserStatus(ctx context.Context, in *UserStatusSubscriptionRequest, opts ...grpc.CallOption) (ChatService_SubscribeToUserStatusClient, error)
	SubscribeToTypingIndicators(ctx context.Context, in *TypingSubscriptionRequest, opts ...grpc.CallOption) (ChatService_SubscribeToTypingIndicatorsClient, error)
	SubscribeToNotifications(ctx context.Context, in *SubscribeToNotificationsRequest, opts ...grpc.CallOption) (ChatService_SubscribeToNotificationsClient, error)
	VideoCallStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_VideoCallStreamClient, error)
	PhoneCallStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_PhoneCallStreamClient, error)
	SubscribeToCallUpdates(ctx context.Context, in *CallSubscriptionRequest, opts ...grpc.CallOption) (ChatService_SubscribeToCallUpdatesClient, error)
	SubscribeToCallSignaling(ctx context.Context, in *CallSignalingRequest, opts ...grpc.CallOption) (ChatService_SubscribeToCallSignalingClient, error)
	// ================================================ MESSAGE HANDLING =======================================
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*EditMessageResponse, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	GetChatHistory(ctx context.Context, in *GetChatHistoryRequest, opts ...grpc.CallOption) (*GetChatHistoryResponse, error)
	MarkAsRead(ctx context.Context, in *ReadReceiptRequest, opts ...grpc.CallOption) (*ReadReceiptResponse, error)
	SearchMessages(ctx context.Context, in *SearchMessagesRequest, opts ...grpc.CallOption) (*SearchMessagesResponse, error)
	ForwardMessage(ctx context.Context, in *ForwardMessageRequest, opts ...grpc.CallOption) (*ForwardMessageResponse, error)
	PinMessage(ctx context.Context, in *PinMessageRequest, opts ...grpc.CallOption) (*PinMessageResponse, error)
	UnpinMessage(ctx context.Context, in *UnpinMessageRequest, opts ...grpc.CallOption) (*UnpinMessageResponse, error)
	GetPinnedMessages(ctx context.Context, in *GetPinnedMessagesRequest, opts ...grpc.CallOption) (*GetPinnedMessagesResponse, error)
	// ================================================ MESSAGE REACTIONS =======================================
	AddLikeMessage(ctx context.Context, in *AddLikeMessageRequest, opts ...grpc.CallOption) (*AddLikeMessageResponse, error)
	UpdateLikedMessage(ctx context.Context, in *UpdateLikedMessageRequest, opts ...grpc.CallOption) (*UpdateLikedMessageResponse, error)
	GetLikedMessages(ctx context.Context, in *GetLikedMessagesRequest, opts ...grpc.CallOption) (*GetLikedMessagesResponse, error)
	GetLastMessages(ctx context.Context, in *GetLastMessagesRequest, opts ...grpc.CallOption) (*GetLastMessagesResponse, error)
	// ================================================ USER MANAGEMENT =======================================
	GetUsersByUserEmail(ctx context.Context, in *GetUsersByUserEmailRequest, opts ...grpc.CallOption) (*GetUsersByUserEmailResponse, error)
	GetUsersInGroup(ctx context.Context, in *GetUsersInGroupRequest, opts ...grpc.CallOption) (*GetUsersInGroupResponse, error)
	GetUserStatus(ctx context.Context, in *UserStatusRequest, opts ...grpc.CallOption) (*UserStatusResponse, error)
	// ================================================ GROUP MANAGEMENT =======================================
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error)
	LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*LeaveGroupResponse, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error)
	GetAllGroupsByUserEmail(ctx context.Context, in *GetAllGroupsByUserEmailRequest, opts ...grpc.CallOption) (*GetAllGroupsByUserEmailResponse, error)
	// ================================================ CALL MANAGEMENT =======================================
	InitiateCall(ctx context.Context, in *InitiateCallRequest, opts ...grpc.CallOption) (*InitiateCallResponse, error)
	AcceptCall(ctx context.Context, in *AcceptCallRequest, opts ...grpc.CallOption) (*AcceptCallResponse, error)
	RejectCall(ctx context.Context, in *RejectCallRequest, opts ...grpc.CallOption) (*RejectCallResponse, error)
	EndCall(ctx context.Context, in *EndCallRequest, opts ...grpc.CallOption) (*EndCallResponse, error)
	GetCallHistory(ctx context.Context, in *GetCallHistoryRequest, opts ...grpc.CallOption) (*GetCallHistoryResponse, error)
	// ================================================ NOTIFICATIONS =======================================
	AddNotification(ctx context.Context, in *AddNotificationRequest, opts ...grpc.CallOption) (*AddNotificationResponse, error)
	UpdateNotification(ctx context.Context, in *UpdateNotificationRequest, opts ...grpc.CallOption) (*UpdateNotificationResponse, error)
	GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*GetNotificationResponse, error)
	MarkNotificationAsRead(ctx context.Context, in *MarkNotificationAsReadRequest, opts ...grpc.CallOption) (*MarkNotificationAsReadResponse, error)
	GetUnreadNotificationCount(ctx context.Context, in *GetUnreadNotificationCountRequest, opts ...grpc.CallOption) (*GetUnreadNotificationCountResponse, error)
	// ================================================ SCHEDULED MESSAGES =======================================
	AddScheduleMessage(ctx context.Context, in *AddScheduleMessageRequest, opts ...grpc.CallOption) (*AddScheduleMessageResponse, error)
	UpdateScheduleMessage(ctx context.Context, in *UpdateScheduleMessageRequest, opts ...grpc.CallOption) (*UpdateScheduleMessageResponse, error)
	CancelScheduledMessage(ctx context.Context, in *CancelScheduledMessageRequest, opts ...grpc.CallOption) (*CancelScheduledMessageResponse, error)
	GetScheduledMessages(ctx context.Context, in *GetScheduledMessagesRequest, opts ...grpc.CallOption) (*GetScheduledMessagesResponse, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) ChatStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], ChatService_ChatStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceChatStreamClient{stream}
	return x, nil
}

type ChatService_ChatStreamClient interface {
	Send(*ChatStreamEnvelope) error
	Recv() (*ChatStreamEnvelope, error)
	grpc.ClientStream
}

type chatServiceChatStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceChatStreamClient) Send(m *ChatStreamEnvelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceChatStreamClient) Recv() (*ChatStreamEnvelope, error) {
	m := new(ChatStreamEnvelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) SubscribeToLastMessages(ctx context.Context, in *LastMessageStreamRequest, opts ...grpc.CallOption) (ChatService_SubscribeToLastMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[1], ChatService_SubscribeToLastMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceSubscribeToLastMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_SubscribeToLastMessagesClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatServiceSubscribeToLastMessagesClient struct {
	grpc.ClientStream
}

func (x *chatServiceSubscribeToLastMessagesClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) SubscribeToUserStatus(ctx context.Context, in *UserStatusSubscriptionRequest, opts ...grpc.CallOption) (ChatService_SubscribeToUserStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[2], ChatService_SubscribeToUserStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceSubscribeToUserStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_SubscribeToUserStatusClient interface {
	Recv() (*UserStatus, error)
	grpc.ClientStream
}

type chatServiceSubscribeToUserStatusClient struct {
	grpc.ClientStream
}

func (x *chatServiceSubscribeToUserStatusClient) Recv() (*UserStatus, error) {
	m := new(UserStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) SubscribeToTypingIndicators(ctx context.Context, in *TypingSubscriptionRequest, opts ...grpc.CallOption) (ChatService_SubscribeToTypingIndicatorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[3], ChatService_SubscribeToTypingIndicators_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceSubscribeToTypingIndicatorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_SubscribeToTypingIndicatorsClient interface {
	Recv() (*TypingIndicator, error)
	grpc.ClientStream
}

type chatServiceSubscribeToTypingIndicatorsClient struct {
	grpc.ClientStream
}

func (x *chatServiceSubscribeToTypingIndicatorsClient) Recv() (*TypingIndicator, error) {
	m := new(TypingIndicator)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) SubscribeToNotifications(ctx context.Context, in *SubscribeToNotificationsRequest, opts ...grpc.CallOption) (ChatService_SubscribeToNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[4], ChatService_SubscribeToNotifications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceSubscribeToNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_SubscribeToNotificationsClient interface {
	Recv() (*NotificationUpdate, error)
	grpc.ClientStream
}

type chatServiceSubscribeToNotificationsClient struct {
	grpc.ClientStream
}

func (x *chatServiceSubscribeToNotificationsClient) Recv() (*NotificationUpdate, error) {
	m := new(NotificationUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) VideoCallStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_VideoCallStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[5], ChatService_VideoCallStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceVideoCallStreamClient{stream}
	return x, nil
}

type ChatService_VideoCallStreamClient interface {
	Send(*VideoCallStreamEnvelope) error
	Recv() (*VideoCallStreamEnvelope, error)
	grpc.ClientStream
}

type chatServiceVideoCallStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceVideoCallStreamClient) Send(m *VideoCallStreamEnvelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceVideoCallStreamClient) Recv() (*VideoCallStreamEnvelope, error) {
	m := new(VideoCallStreamEnvelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) PhoneCallStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_PhoneCallStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[6], ChatService_PhoneCallStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServicePhoneCallStreamClient{stream}
	return x, nil
}

type ChatService_PhoneCallStreamClient interface {
	Send(*PhoneCallStreamEnvelope) error
	Recv() (*PhoneCallStreamEnvelope, error)
	grpc.ClientStream
}

type chatServicePhoneCallStreamClient struct {
	grpc.ClientStream
}

func (x *chatServicePhoneCallStreamClient) Send(m *PhoneCallStreamEnvelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServicePhoneCallStreamClient) Recv() (*PhoneCallStreamEnvelope, error) {
	m := new(PhoneCallStreamEnvelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) SubscribeToCallUpdates(ctx context.Context, in *CallSubscriptionRequest, opts ...grpc.CallOption) (ChatService_SubscribeToCallUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[7], ChatService_SubscribeToCallUpdates_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceSubscribeToCallUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_SubscribeToCallUpdatesClient interface {
	Recv() (*CallUpdate, error)
	grpc.ClientStream
}

type chatServiceSubscribeToCallUpdatesClient struct {
	grpc.ClientStream
}

func (x *chatServiceSubscribeToCallUpdatesClient) Recv() (*CallUpdate, error) {
	m := new(CallUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) SubscribeToCallSignaling(ctx context.Context, in *CallSignalingRequest, opts ...grpc.CallOption) (ChatService_SubscribeToCallSignalingClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[8], ChatService_SubscribeToCallSignaling_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceSubscribeToCallSignalingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_SubscribeToCallSignalingClient interface {
	Recv() (*CallSignalingMessage, error)
	grpc.ClientStream
}

type chatServiceSubscribeToCallSignalingClient struct {
	grpc.ClientStream
}

func (x *chatServiceSubscribeToCallSignalingClient) Recv() (*CallSignalingMessage, error) {
	m := new(CallSignalingMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*EditMessageResponse, error) {
	out := new(EditMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_EditMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_DeleteMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChatHistory(ctx context.Context, in *GetChatHistoryRequest, opts ...grpc.CallOption) (*GetChatHistoryResponse, error) {
	out := new(GetChatHistoryResponse)
	err := c.cc.Invoke(ctx, ChatService_GetChatHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) MarkAsRead(ctx context.Context, in *ReadReceiptRequest, opts ...grpc.CallOption) (*ReadReceiptResponse, error) {
	out := new(ReadReceiptResponse)
	err := c.cc.Invoke(ctx, ChatService_MarkAsRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SearchMessages(ctx context.Context, in *SearchMessagesRequest, opts ...grpc.CallOption) (*SearchMessagesResponse, error) {
	out := new(SearchMessagesResponse)
	err := c.cc.Invoke(ctx, ChatService_SearchMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ForwardMessage(ctx context.Context, in *ForwardMessageRequest, opts ...grpc.CallOption) (*ForwardMessageResponse, error) {
	out := new(ForwardMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_ForwardMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) PinMessage(ctx context.Context, in *PinMessageRequest, opts ...grpc.CallOption) (*PinMessageResponse, error) {
	out := new(PinMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_PinMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UnpinMessage(ctx context.Context, in *UnpinMessageRequest, opts ...grpc.CallOption) (*UnpinMessageResponse, error) {
	out := new(UnpinMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_UnpinMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetPinnedMessages(ctx context.Context, in *GetPinnedMessagesRequest, opts ...grpc.CallOption) (*GetPinnedMessagesResponse, error) {
	out := new(GetPinnedMessagesResponse)
	err := c.cc.Invoke(ctx, ChatService_GetPinnedMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AddLikeMessage(ctx context.Context, in *AddLikeMessageRequest, opts ...grpc.CallOption) (*AddLikeMessageResponse, error) {
	out := new(AddLikeMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_AddLikeMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateLikedMessage(ctx context.Context, in *UpdateLikedMessageRequest, opts ...grpc.CallOption) (*UpdateLikedMessageResponse, error) {
	out := new(UpdateLikedMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_UpdateLikedMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetLikedMessages(ctx context.Context, in *GetLikedMessagesRequest, opts ...grpc.CallOption) (*GetLikedMessagesResponse, error) {
	out := new(GetLikedMessagesResponse)
	err := c.cc.Invoke(ctx, ChatService_GetLikedMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetLastMessages(ctx context.Context, in *GetLastMessagesRequest, opts ...grpc.CallOption) (*GetLastMessagesResponse, error) {
	out := new(GetLastMessagesResponse)
	err := c.cc.Invoke(ctx, ChatService_GetLastMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetUsersByUserEmail(ctx context.Context, in *GetUsersByUserEmailRequest, opts ...grpc.CallOption) (*GetUsersByUserEmailResponse, error) {
	out := new(GetUsersByUserEmailResponse)
	err := c.cc.Invoke(ctx, ChatService_GetUsersByUserEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetUsersInGroup(ctx context.Context, in *GetUsersInGroupRequest, opts ...grpc.CallOption) (*GetUsersInGroupResponse, error) {
	out := new(GetUsersInGroupResponse)
	err := c.cc.Invoke(ctx, ChatService_GetUsersInGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetUserStatus(ctx context.Context, in *UserStatusRequest, opts ...grpc.CallOption) (*UserStatusResponse, error) {
	out := new(UserStatusResponse)
	err := c.cc.Invoke(ctx, ChatService_GetUserStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, ChatService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error) {
	out := new(JoinGroupResponse)
	err := c.cc.Invoke(ctx, ChatService_JoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*LeaveGroupResponse, error) {
	out := new(LeaveGroupResponse)
	err := c.cc.Invoke(ctx, ChatService_LeaveGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error) {
	out := new(UpdateGroupResponse)
	err := c.cc.Invoke(ctx, ChatService_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetAllGroupsByUserEmail(ctx context.Context, in *GetAllGroupsByUserEmailRequest, opts ...grpc.CallOption) (*GetAllGroupsByUserEmailResponse, error) {
	out := new(GetAllGroupsByUserEmailResponse)
	err := c.cc.Invoke(ctx, ChatService_GetAllGroupsByUserEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) InitiateCall(ctx context.Context, in *InitiateCallRequest, opts ...grpc.CallOption) (*InitiateCallResponse, error) {
	out := new(InitiateCallResponse)
	err := c.cc.Invoke(ctx, ChatService_InitiateCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AcceptCall(ctx context.Context, in *AcceptCallRequest, opts ...grpc.CallOption) (*AcceptCallResponse, error) {
	out := new(AcceptCallResponse)
	err := c.cc.Invoke(ctx, ChatService_AcceptCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) RejectCall(ctx context.Context, in *RejectCallRequest, opts ...grpc.CallOption) (*RejectCallResponse, error) {
	out := new(RejectCallResponse)
	err := c.cc.Invoke(ctx, ChatService_RejectCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) EndCall(ctx context.Context, in *EndCallRequest, opts ...grpc.CallOption) (*EndCallResponse, error) {
	out := new(EndCallResponse)
	err := c.cc.Invoke(ctx, ChatService_EndCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetCallHistory(ctx context.Context, in *GetCallHistoryRequest, opts ...grpc.CallOption) (*GetCallHistoryResponse, error) {
	out := new(GetCallHistoryResponse)
	err := c.cc.Invoke(ctx, ChatService_GetCallHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AddNotification(ctx context.Context, in *AddNotificationRequest, opts ...grpc.CallOption) (*AddNotificationResponse, error) {
	out := new(AddNotificationResponse)
	err := c.cc.Invoke(ctx, ChatService_AddNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateNotification(ctx context.Context, in *UpdateNotificationRequest, opts ...grpc.CallOption) (*UpdateNotificationResponse, error) {
	out := new(UpdateNotificationResponse)
	err := c.cc.Invoke(ctx, ChatService_UpdateNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*GetNotificationResponse, error) {
	out := new(GetNotificationResponse)
	err := c.cc.Invoke(ctx, ChatService_GetNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) MarkNotificationAsRead(ctx context.Context, in *MarkNotificationAsReadRequest, opts ...grpc.CallOption) (*MarkNotificationAsReadResponse, error) {
	out := new(MarkNotificationAsReadResponse)
	err := c.cc.Invoke(ctx, ChatService_MarkNotificationAsRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetUnreadNotificationCount(ctx context.Context, in *GetUnreadNotificationCountRequest, opts ...grpc.CallOption) (*GetUnreadNotificationCountResponse, error) {
	out := new(GetUnreadNotificationCountResponse)
	err := c.cc.Invoke(ctx, ChatService_GetUnreadNotificationCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AddScheduleMessage(ctx context.Context, in *AddScheduleMessageRequest, opts ...grpc.CallOption) (*AddScheduleMessageResponse, error) {
	out := new(AddScheduleMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_AddScheduleMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateScheduleMessage(ctx context.Context, in *UpdateScheduleMessageRequest, opts ...grpc.CallOption) (*UpdateScheduleMessageResponse, error) {
	out := new(UpdateScheduleMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_UpdateScheduleMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CancelScheduledMessage(ctx context.Context, in *CancelScheduledMessageRequest, opts ...grpc.CallOption) (*CancelScheduledMessageResponse, error) {
	out := new(CancelScheduledMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_CancelScheduledMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetScheduledMessages(ctx context.Context, in *GetScheduledMessagesRequest, opts ...grpc.CallOption) (*GetScheduledMessagesResponse, error) {
	out := new(GetScheduledMessagesResponse)
	err := c.cc.Invoke(ctx, ChatService_GetScheduledMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	// ================================================ STREAMING =======================================
	ChatStream(ChatService_ChatStreamServer) error
	SubscribeToLastMessages(*LastMessageStreamRequest, ChatService_SubscribeToLastMessagesServer) error
	SubscribeToUserStatus(*UserStatusSubscriptionRequest, ChatService_SubscribeToUserStatusServer) error
	SubscribeToTypingIndicators(*TypingSubscriptionRequest, ChatService_SubscribeToTypingIndicatorsServer) error
	SubscribeToNotifications(*SubscribeToNotificationsRequest, ChatService_SubscribeToNotificationsServer) error
	VideoCallStream(ChatService_VideoCallStreamServer) error
	PhoneCallStream(ChatService_PhoneCallStreamServer) error
	SubscribeToCallUpdates(*CallSubscriptionRequest, ChatService_SubscribeToCallUpdatesServer) error
	SubscribeToCallSignaling(*CallSignalingRequest, ChatService_SubscribeToCallSignalingServer) error
	// ================================================ MESSAGE HANDLING =======================================
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	EditMessage(context.Context, *EditMessageRequest) (*EditMessageResponse, error)
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	GetChatHistory(context.Context, *GetChatHistoryRequest) (*GetChatHistoryResponse, error)
	MarkAsRead(context.Context, *ReadReceiptRequest) (*ReadReceiptResponse, error)
	SearchMessages(context.Context, *SearchMessagesRequest) (*SearchMessagesResponse, error)
	ForwardMessage(context.Context, *ForwardMessageRequest) (*ForwardMessageResponse, error)
	PinMessage(context.Context, *PinMessageRequest) (*PinMessageResponse, error)
	UnpinMessage(context.Context, *UnpinMessageRequest) (*UnpinMessageResponse, error)
	GetPinnedMessages(context.Context, *GetPinnedMessagesRequest) (*GetPinnedMessagesResponse, error)
	// ================================================ MESSAGE REACTIONS =======================================
	AddLikeMessage(context.Context, *AddLikeMessageRequest) (*AddLikeMessageResponse, error)
	UpdateLikedMessage(context.Context, *UpdateLikedMessageRequest) (*UpdateLikedMessageResponse, error)
	GetLikedMessages(context.Context, *GetLikedMessagesRequest) (*GetLikedMessagesResponse, error)
	GetLastMessages(context.Context, *GetLastMessagesRequest) (*GetLastMessagesResponse, error)
	// ================================================ USER MANAGEMENT =======================================
	GetUsersByUserEmail(context.Context, *GetUsersByUserEmailRequest) (*GetUsersByUserEmailResponse, error)
	GetUsersInGroup(context.Context, *GetUsersInGroupRequest) (*GetUsersInGroupResponse, error)
	GetUserStatus(context.Context, *UserStatusRequest) (*UserStatusResponse, error)
	// ================================================ GROUP MANAGEMENT =======================================
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error)
	LeaveGroup(context.Context, *LeaveGroupRequest) (*LeaveGroupResponse, error)
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error)
	GetAllGroupsByUserEmail(context.Context, *GetAllGroupsByUserEmailRequest) (*GetAllGroupsByUserEmailResponse, error)
	// ================================================ CALL MANAGEMENT =======================================
	InitiateCall(context.Context, *InitiateCallRequest) (*InitiateCallResponse, error)
	AcceptCall(context.Context, *AcceptCallRequest) (*AcceptCallResponse, error)
	RejectCall(context.Context, *RejectCallRequest) (*RejectCallResponse, error)
	EndCall(context.Context, *EndCallRequest) (*EndCallResponse, error)
	GetCallHistory(context.Context, *GetCallHistoryRequest) (*GetCallHistoryResponse, error)
	// ================================================ NOTIFICATIONS =======================================
	AddNotification(context.Context, *AddNotificationRequest) (*AddNotificationResponse, error)
	UpdateNotification(context.Context, *UpdateNotificationRequest) (*UpdateNotificationResponse, error)
	GetNotification(context.Context, *GetNotificationRequest) (*GetNotificationResponse, error)
	MarkNotificationAsRead(context.Context, *MarkNotificationAsReadRequest) (*MarkNotificationAsReadResponse, error)
	GetUnreadNotificationCount(context.Context, *GetUnreadNotificationCountRequest) (*GetUnreadNotificationCountResponse, error)
	// ================================================ SCHEDULED MESSAGES =======================================
	AddScheduleMessage(context.Context, *AddScheduleMessageRequest) (*AddScheduleMessageResponse, error)
	UpdateScheduleMessage(context.Context, *UpdateScheduleMessageRequest) (*UpdateScheduleMessageResponse, error)
	CancelScheduledMessage(context.Context, *CancelScheduledMessageRequest) (*CancelScheduledMessageResponse, error)
	GetScheduledMessages(context.Context, *GetScheduledMessagesRequest) (*GetScheduledMessagesResponse, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) ChatStream(ChatService_ChatStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatStream not implemented")
}
func (UnimplementedChatServiceServer) SubscribeToLastMessages(*LastMessageStreamRequest, ChatService_SubscribeToLastMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToLastMessages not implemented")
}
func (UnimplementedChatServiceServer) SubscribeToUserStatus(*UserStatusSubscriptionRequest, ChatService_SubscribeToUserStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToUserStatus not implemented")
}
func (UnimplementedChatServiceServer) SubscribeToTypingIndicators(*TypingSubscriptionRequest, ChatService_SubscribeToTypingIndicatorsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToTypingIndicators not implemented")
}
func (UnimplementedChatServiceServer) SubscribeToNotifications(*SubscribeToNotificationsRequest, ChatService_SubscribeToNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToNotifications not implemented")
}
func (UnimplementedChatServiceServer) VideoCallStream(ChatService_VideoCallStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method VideoCallStream not implemented")
}
func (UnimplementedChatServiceServer) PhoneCallStream(ChatService_PhoneCallStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PhoneCallStream not implemented")
}
func (UnimplementedChatServiceServer) SubscribeToCallUpdates(*CallSubscriptionRequest, ChatService_SubscribeToCallUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToCallUpdates not implemented")
}
func (UnimplementedChatServiceServer) SubscribeToCallSignaling(*CallSignalingRequest, ChatService_SubscribeToCallSignalingServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToCallSignaling not implemented")
}
func (UnimplementedChatServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServiceServer) EditMessage(context.Context, *EditMessageRequest) (*EditMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (UnimplementedChatServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedChatServiceServer) GetChatHistory(context.Context, *GetChatHistoryRequest) (*GetChatHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatHistory not implemented")
}
func (UnimplementedChatServiceServer) MarkAsRead(context.Context, *ReadReceiptRequest) (*ReadReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsRead not implemented")
}
func (UnimplementedChatServiceServer) SearchMessages(context.Context, *SearchMessagesRequest) (*SearchMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMessages not implemented")
}
func (UnimplementedChatServiceServer) ForwardMessage(context.Context, *ForwardMessageRequest) (*ForwardMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardMessage not implemented")
}
func (UnimplementedChatServiceServer) PinMessage(context.Context, *PinMessageRequest) (*PinMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinMessage not implemented")
}
func (UnimplementedChatServiceServer) UnpinMessage(context.Context, *UnpinMessageRequest) (*UnpinMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpinMessage not implemented")
}
func (UnimplementedChatServiceServer) GetPinnedMessages(context.Context, *GetPinnedMessagesRequest) (*GetPinnedMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPinnedMessages not implemented")
}
func (UnimplementedChatServiceServer) AddLikeMessage(context.Context, *AddLikeMessageRequest) (*AddLikeMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLikeMessage not implemented")
}
func (UnimplementedChatServiceServer) UpdateLikedMessage(context.Context, *UpdateLikedMessageRequest) (*UpdateLikedMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLikedMessage not implemented")
}
func (UnimplementedChatServiceServer) GetLikedMessages(context.Context, *GetLikedMessagesRequest) (*GetLikedMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikedMessages not implemented")
}
func (UnimplementedChatServiceServer) GetLastMessages(context.Context, *GetLastMessagesRequest) (*GetLastMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMessages not implemented")
}
func (UnimplementedChatServiceServer) GetUsersByUserEmail(context.Context, *GetUsersByUserEmailRequest) (*GetUsersByUserEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByUserEmail not implemented")
}
func (UnimplementedChatServiceServer) GetUsersInGroup(context.Context, *GetUsersInGroupRequest) (*GetUsersInGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersInGroup not implemented")
}
func (UnimplementedChatServiceServer) GetUserStatus(context.Context, *UserStatusRequest) (*UserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStatus not implemented")
}
func (UnimplementedChatServiceServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedChatServiceServer) JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedChatServiceServer) LeaveGroup(context.Context, *LeaveGroupRequest) (*LeaveGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedChatServiceServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedChatServiceServer) GetAllGroupsByUserEmail(context.Context, *GetAllGroupsByUserEmailRequest) (*GetAllGroupsByUserEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGroupsByUserEmail not implemented")
}
func (UnimplementedChatServiceServer) InitiateCall(context.Context, *InitiateCallRequest) (*InitiateCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateCall not implemented")
}
func (UnimplementedChatServiceServer) AcceptCall(context.Context, *AcceptCallRequest) (*AcceptCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptCall not implemented")
}
func (UnimplementedChatServiceServer) RejectCall(context.Context, *RejectCallRequest) (*RejectCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectCall not implemented")
}
func (UnimplementedChatServiceServer) EndCall(context.Context, *EndCallRequest) (*EndCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndCall not implemented")
}
func (UnimplementedChatServiceServer) GetCallHistory(context.Context, *GetCallHistoryRequest) (*GetCallHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallHistory not implemented")
}
func (UnimplementedChatServiceServer) AddNotification(context.Context, *AddNotificationRequest) (*AddNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotification not implemented")
}
func (UnimplementedChatServiceServer) UpdateNotification(context.Context, *UpdateNotificationRequest) (*UpdateNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotification not implemented")
}
func (UnimplementedChatServiceServer) GetNotification(context.Context, *GetNotificationRequest) (*GetNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotification not implemented")
}
func (UnimplementedChatServiceServer) MarkNotificationAsRead(context.Context, *MarkNotificationAsReadRequest) (*MarkNotificationAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNotificationAsRead not implemented")
}
func (UnimplementedChatServiceServer) GetUnreadNotificationCount(context.Context, *GetUnreadNotificationCountRequest) (*GetUnreadNotificationCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnreadNotificationCount not implemented")
}
func (UnimplementedChatServiceServer) AddScheduleMessage(context.Context, *AddScheduleMessageRequest) (*AddScheduleMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScheduleMessage not implemented")
}
func (UnimplementedChatServiceServer) UpdateScheduleMessage(context.Context, *UpdateScheduleMessageRequest) (*UpdateScheduleMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduleMessage not implemented")
}
func (UnimplementedChatServiceServer) CancelScheduledMessage(context.Context, *CancelScheduledMessageRequest) (*CancelScheduledMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelScheduledMessage not implemented")
}
func (UnimplementedChatServiceServer) GetScheduledMessages(context.Context, *GetScheduledMessagesRequest) (*GetScheduledMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledMessages not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_ChatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).ChatStream(&chatServiceChatStreamServer{stream})
}

type ChatService_ChatStreamServer interface {
	Send(*ChatStreamEnvelope) error
	Recv() (*ChatStreamEnvelope, error)
	grpc.ServerStream
}

type chatServiceChatStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceChatStreamServer) Send(m *ChatStreamEnvelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceChatStreamServer) Recv() (*ChatStreamEnvelope, error) {
	m := new(ChatStreamEnvelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatService_SubscribeToLastMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LastMessageStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).SubscribeToLastMessages(m, &chatServiceSubscribeToLastMessagesServer{stream})
}

type ChatService_SubscribeToLastMessagesServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type chatServiceSubscribeToLastMessagesServer struct {
	grpc.ServerStream
}

func (x *chatServiceSubscribeToLastMessagesServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_SubscribeToUserStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserStatusSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).SubscribeToUserStatus(m, &chatServiceSubscribeToUserStatusServer{stream})
}

type ChatService_SubscribeToUserStatusServer interface {
	Send(*UserStatus) error
	grpc.ServerStream
}

type chatServiceSubscribeToUserStatusServer struct {
	grpc.ServerStream
}

func (x *chatServiceSubscribeToUserStatusServer) Send(m *UserStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_SubscribeToTypingIndicators_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TypingSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).SubscribeToTypingIndicators(m, &chatServiceSubscribeToTypingIndicatorsServer{stream})
}

type ChatService_SubscribeToTypingIndicatorsServer interface {
	Send(*TypingIndicator) error
	grpc.ServerStream
}

type chatServiceSubscribeToTypingIndicatorsServer struct {
	grpc.ServerStream
}

func (x *chatServiceSubscribeToTypingIndicatorsServer) Send(m *TypingIndicator) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_SubscribeToNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToNotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).SubscribeToNotifications(m, &chatServiceSubscribeToNotificationsServer{stream})
}

type ChatService_SubscribeToNotificationsServer interface {
	Send(*NotificationUpdate) error
	grpc.ServerStream
}

type chatServiceSubscribeToNotificationsServer struct {
	grpc.ServerStream
}

func (x *chatServiceSubscribeToNotificationsServer) Send(m *NotificationUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_VideoCallStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).VideoCallStream(&chatServiceVideoCallStreamServer{stream})
}

type ChatService_VideoCallStreamServer interface {
	Send(*VideoCallStreamEnvelope) error
	Recv() (*VideoCallStreamEnvelope, error)
	grpc.ServerStream
}

type chatServiceVideoCallStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceVideoCallStreamServer) Send(m *VideoCallStreamEnvelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceVideoCallStreamServer) Recv() (*VideoCallStreamEnvelope, error) {
	m := new(VideoCallStreamEnvelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatService_PhoneCallStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).PhoneCallStream(&chatServicePhoneCallStreamServer{stream})
}

type ChatService_PhoneCallStreamServer interface {
	Send(*PhoneCallStreamEnvelope) error
	Recv() (*PhoneCallStreamEnvelope, error)
	grpc.ServerStream
}

type chatServicePhoneCallStreamServer struct {
	grpc.ServerStream
}

func (x *chatServicePhoneCallStreamServer) Send(m *PhoneCallStreamEnvelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServicePhoneCallStreamServer) Recv() (*PhoneCallStreamEnvelope, error) {
	m := new(PhoneCallStreamEnvelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatService_SubscribeToCallUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CallSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).SubscribeToCallUpdates(m, &chatServiceSubscribeToCallUpdatesServer{stream})
}

type ChatService_SubscribeToCallUpdatesServer interface {
	Send(*CallUpdate) error
	grpc.ServerStream
}

type chatServiceSubscribeToCallUpdatesServer struct {
	grpc.ServerStream
}

func (x *chatServiceSubscribeToCallUpdatesServer) Send(m *CallUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_SubscribeToCallSignaling_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CallSignalingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).SubscribeToCallSignaling(m, &chatServiceSubscribeToCallSignalingServer{stream})
}

type ChatService_SubscribeToCallSignalingServer interface {
	Send(*CallSignalingMessage) error
	grpc.ServerStream
}

type chatServiceSubscribeToCallSignalingServer struct {
	grpc.ServerStream
}

func (x *chatServiceSubscribeToCallSignalingServer) Send(m *CallSignalingMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_EditMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).EditMessage(ctx, req.(*EditMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetChatHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChatHistory(ctx, req.(*GetChatHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_MarkAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).MarkAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_MarkAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).MarkAsRead(ctx, req.(*ReadReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SearchMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SearchMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SearchMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SearchMessages(ctx, req.(*SearchMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ForwardMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ForwardMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_ForwardMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ForwardMessage(ctx, req.(*ForwardMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_PinMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).PinMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_PinMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).PinMessage(ctx, req.(*PinMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UnpinMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpinMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UnpinMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UnpinMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UnpinMessage(ctx, req.(*UnpinMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetPinnedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPinnedMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetPinnedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetPinnedMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetPinnedMessages(ctx, req.(*GetPinnedMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AddLikeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLikeMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AddLikeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_AddLikeMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AddLikeMessage(ctx, req.(*AddLikeMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateLikedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLikedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateLikedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateLikedMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateLikedMessage(ctx, req.(*UpdateLikedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetLikedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikedMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetLikedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetLikedMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetLikedMessages(ctx, req.(*GetLikedMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetLastMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetLastMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetLastMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetLastMessages(ctx, req.(*GetLastMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetUsersByUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetUsersByUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetUsersByUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetUsersByUserEmail(ctx, req.(*GetUsersByUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetUsersInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetUsersInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetUsersInGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetUsersInGroup(ctx, req.(*GetUsersInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetUserStatus(ctx, req.(*UserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_JoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).JoinGroup(ctx, req.(*JoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_LeaveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).LeaveGroup(ctx, req.(*LeaveGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetAllGroupsByUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGroupsByUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetAllGroupsByUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetAllGroupsByUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetAllGroupsByUserEmail(ctx, req.(*GetAllGroupsByUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_InitiateCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).InitiateCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_InitiateCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).InitiateCall(ctx, req.(*InitiateCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AcceptCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AcceptCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_AcceptCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AcceptCall(ctx, req.(*AcceptCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RejectCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RejectCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_RejectCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RejectCall(ctx, req.(*RejectCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_EndCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).EndCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_EndCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).EndCall(ctx, req.(*EndCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetCallHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCallHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetCallHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetCallHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetCallHistory(ctx, req.(*GetCallHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AddNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AddNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_AddNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AddNotification(ctx, req.(*AddNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateNotification(ctx, req.(*UpdateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetNotification(ctx, req.(*GetNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_MarkNotificationAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkNotificationAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).MarkNotificationAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_MarkNotificationAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).MarkNotificationAsRead(ctx, req.(*MarkNotificationAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetUnreadNotificationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnreadNotificationCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetUnreadNotificationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetUnreadNotificationCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetUnreadNotificationCount(ctx, req.(*GetUnreadNotificationCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AddScheduleMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScheduleMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AddScheduleMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_AddScheduleMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AddScheduleMessage(ctx, req.(*AddScheduleMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateScheduleMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduleMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateScheduleMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateScheduleMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateScheduleMessage(ctx, req.(*UpdateScheduleMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CancelScheduledMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelScheduledMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CancelScheduledMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CancelScheduledMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CancelScheduledMessage(ctx, req.(*CancelScheduledMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetScheduledMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduledMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetScheduledMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetScheduledMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetScheduledMessages(ctx, req.(*GetScheduledMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
		{
			MethodName: "EditMessage",
			Handler:    _ChatService_EditMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _ChatService_DeleteMessage_Handler,
		},
		{
			MethodName: "GetChatHistory",
			Handler:    _ChatService_GetChatHistory_Handler,
		},
		{
			MethodName: "MarkAsRead",
			Handler:    _ChatService_MarkAsRead_Handler,
		},
		{
			MethodName: "SearchMessages",
			Handler:    _ChatService_SearchMessages_Handler,
		},
		{
			MethodName: "ForwardMessage",
			Handler:    _ChatService_ForwardMessage_Handler,
		},
		{
			MethodName: "PinMessage",
			Handler:    _ChatService_PinMessage_Handler,
		},
		{
			MethodName: "UnpinMessage",
			Handler:    _ChatService_UnpinMessage_Handler,
		},
		{
			MethodName: "GetPinnedMessages",
			Handler:    _ChatService_GetPinnedMessages_Handler,
		},
		{
			MethodName: "AddLikeMessage",
			Handler:    _ChatService_AddLikeMessage_Handler,
		},
		{
			MethodName: "UpdateLikedMessage",
			Handler:    _ChatService_UpdateLikedMessage_Handler,
		},
		{
			MethodName: "GetLikedMessages",
			Handler:    _ChatService_GetLikedMessages_Handler,
		},
		{
			MethodName: "GetLastMessages",
			Handler:    _ChatService_GetLastMessages_Handler,
		},
		{
			MethodName: "GetUsersByUserEmail",
			Handler:    _ChatService_GetUsersByUserEmail_Handler,
		},
		{
			MethodName: "GetUsersInGroup",
			Handler:    _ChatService_GetUsersInGroup_Handler,
		},
		{
			MethodName: "GetUserStatus",
			Handler:    _ChatService_GetUserStatus_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _ChatService_CreateGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _ChatService_JoinGroup_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _ChatService_LeaveGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _ChatService_UpdateGroup_Handler,
		},
		{
			MethodName: "GetAllGroupsByUserEmail",
			Handler:    _ChatService_GetAllGroupsByUserEmail_Handler,
		},
		{
			MethodName: "InitiateCall",
			Handler:    _ChatService_InitiateCall_Handler,
		},
		{
			MethodName: "AcceptCall",
			Handler:    _ChatService_AcceptCall_Handler,
		},
		{
			MethodName: "RejectCall",
			Handler:    _ChatService_RejectCall_Handler,
		},
		{
			MethodName: "EndCall",
			Handler:    _ChatService_EndCall_Handler,
		},
		{
			MethodName: "GetCallHistory",
			Handler:    _ChatService_GetCallHistory_Handler,
		},
		{
			MethodName: "AddNotification",
			Handler:    _ChatService_AddNotification_Handler,
		},
		{
			MethodName: "UpdateNotification",
			Handler:    _ChatService_UpdateNotification_Handler,
		},
		{
			MethodName: "GetNotification",
			Handler:    _ChatService_GetNotification_Handler,
		},
		{
			MethodName: "MarkNotificationAsRead",
			Handler:    _ChatService_MarkNotificationAsRead_Handler,
		},
		{
			MethodName: "GetUnreadNotificationCount",
			Handler:    _ChatService_GetUnreadNotificationCount_Handler,
		},
		{
			MethodName: "AddScheduleMessage",
			Handler:    _ChatService_AddScheduleMessage_Handler,
		},
		{
			MethodName: "UpdateScheduleMessage",
			Handler:    _ChatService_UpdateScheduleMessage_Handler,
		},
		{
			MethodName: "CancelScheduledMessage",
			Handler:    _ChatService_CancelScheduledMessage_Handler,
		},
		{
			MethodName: "GetScheduledMessages",
			Handler:    _ChatService_GetScheduledMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatStream",
			Handler:       _ChatService_ChatStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeToLastMessages",
			Handler:       _ChatService_SubscribeToLastMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToUserStatus",
			Handler:       _ChatService_SubscribeToUserStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToTypingIndicators",
			Handler:       _ChatService_SubscribeToTypingIndicators_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToNotifications",
			Handler:       _ChatService_SubscribeToNotifications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "VideoCallStream",
			Handler:       _ChatService_VideoCallStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PhoneCallStream",
			Handler:       _ChatService_PhoneCallStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeToCallUpdates",
			Handler:       _ChatService_SubscribeToCallUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToCallSignaling",
			Handler:       _ChatService_SubscribeToCallSignaling_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/chat.proto",
}
