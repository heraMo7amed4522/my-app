// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/pharaoh.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PharaohService_GetPharaohByID_FullMethodName       = "/pharaohs.PharaohService/GetPharaohByID"
	PharaohService_GetAllPharaohs_FullMethodName       = "/pharaohs.PharaohService/GetAllPharaohs"
	PharaohService_GetPharaohsByDynasty_FullMethodName = "/pharaohs.PharaohService/GetPharaohsByDynasty"
	PharaohService_GetPharaohsByPeriod_FullMethodName  = "/pharaohs.PharaohService/GetPharaohsByPeriod"
	PharaohService_SearchPharaohs_FullMethodName       = "/pharaohs.PharaohService/SearchPharaohs"
	PharaohService_CreatePharaoh_FullMethodName        = "/pharaohs.PharaohService/CreatePharaoh"
	PharaohService_UpdatePharaoh_FullMethodName        = "/pharaohs.PharaohService/UpdatePharaoh"
	PharaohService_DeletePharaoh_FullMethodName        = "/pharaohs.PharaohService/DeletePharaoh"
	PharaohService_GetPharaohsByRarity_FullMethodName  = "/pharaohs.PharaohService/GetPharaohsByRarity"
	PharaohService_UpdatePharaohRating_FullMethodName  = "/pharaohs.PharaohService/UpdatePharaohRating"
)

// PharaohServiceClient is the client API for PharaohService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PharaohServiceClient interface {
	GetPharaohByID(ctx context.Context, in *GetPharaohByIDRequest, opts ...grpc.CallOption) (*GetPharaohByIDResponse, error)
	GetAllPharaohs(ctx context.Context, in *GetAllPharaohsRequest, opts ...grpc.CallOption) (*GetAllPharaohsResponse, error)
	GetPharaohsByDynasty(ctx context.Context, in *GetPharaohsByDynastyRequest, opts ...grpc.CallOption) (*GetPharaohsByDynastyResponse, error)
	GetPharaohsByPeriod(ctx context.Context, in *GetPharaohsByPeriodRequest, opts ...grpc.CallOption) (*GetPharaohsByPeriodResponse, error)
	SearchPharaohs(ctx context.Context, in *SearchPharaohsRequest, opts ...grpc.CallOption) (*SearchPharaohsResponse, error)
	CreatePharaoh(ctx context.Context, in *CreatePharaohRequest, opts ...grpc.CallOption) (*CreatePharaohResponse, error)
	UpdatePharaoh(ctx context.Context, in *UpdatePharaohRequest, opts ...grpc.CallOption) (*UpdatePharaohResponse, error)
	DeletePharaoh(ctx context.Context, in *DeletePharaohRequest, opts ...grpc.CallOption) (*DeletePharaohResponse, error)
	GetPharaohsByRarity(ctx context.Context, in *GetPharaohsByRarityRequest, opts ...grpc.CallOption) (*GetPharaohsByRarityResponse, error)
	UpdatePharaohRating(ctx context.Context, in *UpdatePharaohRatingRequest, opts ...grpc.CallOption) (*UpdatePharaohRatingResponse, error)
}

type pharaohServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPharaohServiceClient(cc grpc.ClientConnInterface) PharaohServiceClient {
	return &pharaohServiceClient{cc}
}

func (c *pharaohServiceClient) GetPharaohByID(ctx context.Context, in *GetPharaohByIDRequest, opts ...grpc.CallOption) (*GetPharaohByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPharaohByIDResponse)
	err := c.cc.Invoke(ctx, PharaohService_GetPharaohByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharaohServiceClient) GetAllPharaohs(ctx context.Context, in *GetAllPharaohsRequest, opts ...grpc.CallOption) (*GetAllPharaohsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPharaohsResponse)
	err := c.cc.Invoke(ctx, PharaohService_GetAllPharaohs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharaohServiceClient) GetPharaohsByDynasty(ctx context.Context, in *GetPharaohsByDynastyRequest, opts ...grpc.CallOption) (*GetPharaohsByDynastyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPharaohsByDynastyResponse)
	err := c.cc.Invoke(ctx, PharaohService_GetPharaohsByDynasty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharaohServiceClient) GetPharaohsByPeriod(ctx context.Context, in *GetPharaohsByPeriodRequest, opts ...grpc.CallOption) (*GetPharaohsByPeriodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPharaohsByPeriodResponse)
	err := c.cc.Invoke(ctx, PharaohService_GetPharaohsByPeriod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharaohServiceClient) SearchPharaohs(ctx context.Context, in *SearchPharaohsRequest, opts ...grpc.CallOption) (*SearchPharaohsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPharaohsResponse)
	err := c.cc.Invoke(ctx, PharaohService_SearchPharaohs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharaohServiceClient) CreatePharaoh(ctx context.Context, in *CreatePharaohRequest, opts ...grpc.CallOption) (*CreatePharaohResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePharaohResponse)
	err := c.cc.Invoke(ctx, PharaohService_CreatePharaoh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharaohServiceClient) UpdatePharaoh(ctx context.Context, in *UpdatePharaohRequest, opts ...grpc.CallOption) (*UpdatePharaohResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePharaohResponse)
	err := c.cc.Invoke(ctx, PharaohService_UpdatePharaoh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharaohServiceClient) DeletePharaoh(ctx context.Context, in *DeletePharaohRequest, opts ...grpc.CallOption) (*DeletePharaohResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePharaohResponse)
	err := c.cc.Invoke(ctx, PharaohService_DeletePharaoh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharaohServiceClient) GetPharaohsByRarity(ctx context.Context, in *GetPharaohsByRarityRequest, opts ...grpc.CallOption) (*GetPharaohsByRarityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPharaohsByRarityResponse)
	err := c.cc.Invoke(ctx, PharaohService_GetPharaohsByRarity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharaohServiceClient) UpdatePharaohRating(ctx context.Context, in *UpdatePharaohRatingRequest, opts ...grpc.CallOption) (*UpdatePharaohRatingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePharaohRatingResponse)
	err := c.cc.Invoke(ctx, PharaohService_UpdatePharaohRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PharaohServiceServer is the server API for PharaohService service.
// All implementations must embed UnimplementedPharaohServiceServer
// for forward compatibility.
type PharaohServiceServer interface {
	GetPharaohByID(context.Context, *GetPharaohByIDRequest) (*GetPharaohByIDResponse, error)
	GetAllPharaohs(context.Context, *GetAllPharaohsRequest) (*GetAllPharaohsResponse, error)
	GetPharaohsByDynasty(context.Context, *GetPharaohsByDynastyRequest) (*GetPharaohsByDynastyResponse, error)
	GetPharaohsByPeriod(context.Context, *GetPharaohsByPeriodRequest) (*GetPharaohsByPeriodResponse, error)
	SearchPharaohs(context.Context, *SearchPharaohsRequest) (*SearchPharaohsResponse, error)
	CreatePharaoh(context.Context, *CreatePharaohRequest) (*CreatePharaohResponse, error)
	UpdatePharaoh(context.Context, *UpdatePharaohRequest) (*UpdatePharaohResponse, error)
	DeletePharaoh(context.Context, *DeletePharaohRequest) (*DeletePharaohResponse, error)
	GetPharaohsByRarity(context.Context, *GetPharaohsByRarityRequest) (*GetPharaohsByRarityResponse, error)
	UpdatePharaohRating(context.Context, *UpdatePharaohRatingRequest) (*UpdatePharaohRatingResponse, error)
	mustEmbedUnimplementedPharaohServiceServer()
}

// UnimplementedPharaohServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPharaohServiceServer struct{}

func (UnimplementedPharaohServiceServer) GetPharaohByID(context.Context, *GetPharaohByIDRequest) (*GetPharaohByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPharaohByID not implemented")
}
func (UnimplementedPharaohServiceServer) GetAllPharaohs(context.Context, *GetAllPharaohsRequest) (*GetAllPharaohsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPharaohs not implemented")
}
func (UnimplementedPharaohServiceServer) GetPharaohsByDynasty(context.Context, *GetPharaohsByDynastyRequest) (*GetPharaohsByDynastyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPharaohsByDynasty not implemented")
}
func (UnimplementedPharaohServiceServer) GetPharaohsByPeriod(context.Context, *GetPharaohsByPeriodRequest) (*GetPharaohsByPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPharaohsByPeriod not implemented")
}
func (UnimplementedPharaohServiceServer) SearchPharaohs(context.Context, *SearchPharaohsRequest) (*SearchPharaohsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPharaohs not implemented")
}
func (UnimplementedPharaohServiceServer) CreatePharaoh(context.Context, *CreatePharaohRequest) (*CreatePharaohResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePharaoh not implemented")
}
func (UnimplementedPharaohServiceServer) UpdatePharaoh(context.Context, *UpdatePharaohRequest) (*UpdatePharaohResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePharaoh not implemented")
}
func (UnimplementedPharaohServiceServer) DeletePharaoh(context.Context, *DeletePharaohRequest) (*DeletePharaohResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePharaoh not implemented")
}
func (UnimplementedPharaohServiceServer) GetPharaohsByRarity(context.Context, *GetPharaohsByRarityRequest) (*GetPharaohsByRarityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPharaohsByRarity not implemented")
}
func (UnimplementedPharaohServiceServer) UpdatePharaohRating(context.Context, *UpdatePharaohRatingRequest) (*UpdatePharaohRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePharaohRating not implemented")
}
func (UnimplementedPharaohServiceServer) mustEmbedUnimplementedPharaohServiceServer() {}
func (UnimplementedPharaohServiceServer) testEmbeddedByValue()                        {}

// UnsafePharaohServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PharaohServiceServer will
// result in compilation errors.
type UnsafePharaohServiceServer interface {
	mustEmbedUnimplementedPharaohServiceServer()
}

func RegisterPharaohServiceServer(s grpc.ServiceRegistrar, srv PharaohServiceServer) {
	// If the following call pancis, it indicates UnimplementedPharaohServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PharaohService_ServiceDesc, srv)
}

func _PharaohService_GetPharaohByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPharaohByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharaohServiceServer).GetPharaohByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharaohService_GetPharaohByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharaohServiceServer).GetPharaohByID(ctx, req.(*GetPharaohByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharaohService_GetAllPharaohs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPharaohsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharaohServiceServer).GetAllPharaohs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharaohService_GetAllPharaohs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharaohServiceServer).GetAllPharaohs(ctx, req.(*GetAllPharaohsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharaohService_GetPharaohsByDynasty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPharaohsByDynastyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharaohServiceServer).GetPharaohsByDynasty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharaohService_GetPharaohsByDynasty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharaohServiceServer).GetPharaohsByDynasty(ctx, req.(*GetPharaohsByDynastyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharaohService_GetPharaohsByPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPharaohsByPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharaohServiceServer).GetPharaohsByPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharaohService_GetPharaohsByPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharaohServiceServer).GetPharaohsByPeriod(ctx, req.(*GetPharaohsByPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharaohService_SearchPharaohs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPharaohsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharaohServiceServer).SearchPharaohs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharaohService_SearchPharaohs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharaohServiceServer).SearchPharaohs(ctx, req.(*SearchPharaohsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharaohService_CreatePharaoh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePharaohRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharaohServiceServer).CreatePharaoh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharaohService_CreatePharaoh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharaohServiceServer).CreatePharaoh(ctx, req.(*CreatePharaohRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharaohService_UpdatePharaoh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePharaohRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharaohServiceServer).UpdatePharaoh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharaohService_UpdatePharaoh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharaohServiceServer).UpdatePharaoh(ctx, req.(*UpdatePharaohRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharaohService_DeletePharaoh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePharaohRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharaohServiceServer).DeletePharaoh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharaohService_DeletePharaoh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharaohServiceServer).DeletePharaoh(ctx, req.(*DeletePharaohRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharaohService_GetPharaohsByRarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPharaohsByRarityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharaohServiceServer).GetPharaohsByRarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharaohService_GetPharaohsByRarity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharaohServiceServer).GetPharaohsByRarity(ctx, req.(*GetPharaohsByRarityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharaohService_UpdatePharaohRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePharaohRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharaohServiceServer).UpdatePharaohRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharaohService_UpdatePharaohRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharaohServiceServer).UpdatePharaohRating(ctx, req.(*UpdatePharaohRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PharaohService_ServiceDesc is the grpc.ServiceDesc for PharaohService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PharaohService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pharaohs.PharaohService",
	HandlerType: (*PharaohServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPharaohByID",
			Handler:    _PharaohService_GetPharaohByID_Handler,
		},
		{
			MethodName: "GetAllPharaohs",
			Handler:    _PharaohService_GetAllPharaohs_Handler,
		},
		{
			MethodName: "GetPharaohsByDynasty",
			Handler:    _PharaohService_GetPharaohsByDynasty_Handler,
		},
		{
			MethodName: "GetPharaohsByPeriod",
			Handler:    _PharaohService_GetPharaohsByPeriod_Handler,
		},
		{
			MethodName: "SearchPharaohs",
			Handler:    _PharaohService_SearchPharaohs_Handler,
		},
		{
			MethodName: "CreatePharaoh",
			Handler:    _PharaohService_CreatePharaoh_Handler,
		},
		{
			MethodName: "UpdatePharaoh",
			Handler:    _PharaohService_UpdatePharaoh_Handler,
		},
		{
			MethodName: "DeletePharaoh",
			Handler:    _PharaohService_DeletePharaoh_Handler,
		},
		{
			MethodName: "GetPharaohsByRarity",
			Handler:    _PharaohService_GetPharaohsByRarity_Handler,
		},
		{
			MethodName: "UpdatePharaohRating",
			Handler:    _PharaohService_UpdatePharaohRating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pharaoh.proto",
}
