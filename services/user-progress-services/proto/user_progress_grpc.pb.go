// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/user_progress.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserProgressService_GetUserProgress_FullMethodName       = "/user_progress.UserProgressService/GetUserProgress"
	UserProgressService_UpdateProgress_FullMethodName        = "/user_progress.UserProgressService/UpdateProgress"
	UserProgressService_GetCompletedTemplates_FullMethodName = "/user_progress.UserProgressService/GetCompletedTemplates"
	UserProgressService_GetUserAchievements_FullMethodName   = "/user_progress.UserProgressService/GetUserAchievements"
	UserProgressService_UnlockAchievement_FullMethodName     = "/user_progress.UserProgressService/UnlockAchievement"
	UserProgressService_GetLearningPath_FullMethodName       = "/user_progress.UserProgressService/GetLearningPath"
)

// UserProgressServiceClient is the client API for UserProgressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserProgressServiceClient interface {
	GetUserProgress(ctx context.Context, in *GetUserProgressRequest, opts ...grpc.CallOption) (*GetUserProgressResponse, error)
	UpdateProgress(ctx context.Context, in *UpdateProgressRequest, opts ...grpc.CallOption) (*UpdateProgressResponse, error)
	GetCompletedTemplates(ctx context.Context, in *GetCompletedTemplatesRequest, opts ...grpc.CallOption) (*GetCompletedTemplatesResponse, error)
	GetUserAchievements(ctx context.Context, in *GetUserAchievementsRequest, opts ...grpc.CallOption) (*GetUserAchievementsResponse, error)
	UnlockAchievement(ctx context.Context, in *UnlockAchievementRequest, opts ...grpc.CallOption) (*UnlockAchievementResponse, error)
	GetLearningPath(ctx context.Context, in *GetLearningPathRequest, opts ...grpc.CallOption) (*GetLearningPathResponse, error)
}

type userProgressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserProgressServiceClient(cc grpc.ClientConnInterface) UserProgressServiceClient {
	return &userProgressServiceClient{cc}
}

func (c *userProgressServiceClient) GetUserProgress(ctx context.Context, in *GetUserProgressRequest, opts ...grpc.CallOption) (*GetUserProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProgressResponse)
	err := c.cc.Invoke(ctx, UserProgressService_GetUserProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgressServiceClient) UpdateProgress(ctx context.Context, in *UpdateProgressRequest, opts ...grpc.CallOption) (*UpdateProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProgressResponse)
	err := c.cc.Invoke(ctx, UserProgressService_UpdateProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgressServiceClient) GetCompletedTemplates(ctx context.Context, in *GetCompletedTemplatesRequest, opts ...grpc.CallOption) (*GetCompletedTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompletedTemplatesResponse)
	err := c.cc.Invoke(ctx, UserProgressService_GetCompletedTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgressServiceClient) GetUserAchievements(ctx context.Context, in *GetUserAchievementsRequest, opts ...grpc.CallOption) (*GetUserAchievementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAchievementsResponse)
	err := c.cc.Invoke(ctx, UserProgressService_GetUserAchievements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgressServiceClient) UnlockAchievement(ctx context.Context, in *UnlockAchievementRequest, opts ...grpc.CallOption) (*UnlockAchievementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlockAchievementResponse)
	err := c.cc.Invoke(ctx, UserProgressService_UnlockAchievement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgressServiceClient) GetLearningPath(ctx context.Context, in *GetLearningPathRequest, opts ...grpc.CallOption) (*GetLearningPathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLearningPathResponse)
	err := c.cc.Invoke(ctx, UserProgressService_GetLearningPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserProgressServiceServer is the server API for UserProgressService service.
// All implementations must embed UnimplementedUserProgressServiceServer
// for forward compatibility.
type UserProgressServiceServer interface {
	GetUserProgress(context.Context, *GetUserProgressRequest) (*GetUserProgressResponse, error)
	UpdateProgress(context.Context, *UpdateProgressRequest) (*UpdateProgressResponse, error)
	GetCompletedTemplates(context.Context, *GetCompletedTemplatesRequest) (*GetCompletedTemplatesResponse, error)
	GetUserAchievements(context.Context, *GetUserAchievementsRequest) (*GetUserAchievementsResponse, error)
	UnlockAchievement(context.Context, *UnlockAchievementRequest) (*UnlockAchievementResponse, error)
	GetLearningPath(context.Context, *GetLearningPathRequest) (*GetLearningPathResponse, error)
	mustEmbedUnimplementedUserProgressServiceServer()
}

// UnimplementedUserProgressServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserProgressServiceServer struct{}

func (UnimplementedUserProgressServiceServer) GetUserProgress(context.Context, *GetUserProgressRequest) (*GetUserProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProgress not implemented")
}
func (UnimplementedUserProgressServiceServer) UpdateProgress(context.Context, *UpdateProgressRequest) (*UpdateProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgress not implemented")
}
func (UnimplementedUserProgressServiceServer) GetCompletedTemplates(context.Context, *GetCompletedTemplatesRequest) (*GetCompletedTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompletedTemplates not implemented")
}
func (UnimplementedUserProgressServiceServer) GetUserAchievements(context.Context, *GetUserAchievementsRequest) (*GetUserAchievementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAchievements not implemented")
}
func (UnimplementedUserProgressServiceServer) UnlockAchievement(context.Context, *UnlockAchievementRequest) (*UnlockAchievementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockAchievement not implemented")
}
func (UnimplementedUserProgressServiceServer) GetLearningPath(context.Context, *GetLearningPathRequest) (*GetLearningPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLearningPath not implemented")
}
func (UnimplementedUserProgressServiceServer) mustEmbedUnimplementedUserProgressServiceServer() {}
func (UnimplementedUserProgressServiceServer) testEmbeddedByValue()                             {}

// UnsafeUserProgressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserProgressServiceServer will
// result in compilation errors.
type UnsafeUserProgressServiceServer interface {
	mustEmbedUnimplementedUserProgressServiceServer()
}

func RegisterUserProgressServiceServer(s grpc.ServiceRegistrar, srv UserProgressServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserProgressServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserProgressService_ServiceDesc, srv)
}

func _UserProgressService_GetUserProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressServiceServer).GetUserProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressService_GetUserProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressServiceServer).GetUserProgress(ctx, req.(*GetUserProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgressService_UpdateProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressServiceServer).UpdateProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressService_UpdateProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressServiceServer).UpdateProgress(ctx, req.(*UpdateProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgressService_GetCompletedTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompletedTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressServiceServer).GetCompletedTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressService_GetCompletedTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressServiceServer).GetCompletedTemplates(ctx, req.(*GetCompletedTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgressService_GetUserAchievements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAchievementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressServiceServer).GetUserAchievements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressService_GetUserAchievements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressServiceServer).GetUserAchievements(ctx, req.(*GetUserAchievementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgressService_UnlockAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressServiceServer).UnlockAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressService_UnlockAchievement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressServiceServer).UnlockAchievement(ctx, req.(*UnlockAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgressService_GetLearningPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLearningPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressServiceServer).GetLearningPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressService_GetLearningPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressServiceServer).GetLearningPath(ctx, req.(*GetLearningPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserProgressService_ServiceDesc is the grpc.ServiceDesc for UserProgressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserProgressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_progress.UserProgressService",
	HandlerType: (*UserProgressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserProgress",
			Handler:    _UserProgressService_GetUserProgress_Handler,
		},
		{
			MethodName: "UpdateProgress",
			Handler:    _UserProgressService_UpdateProgress_Handler,
		},
		{
			MethodName: "GetCompletedTemplates",
			Handler:    _UserProgressService_GetCompletedTemplates_Handler,
		},
		{
			MethodName: "GetUserAchievements",
			Handler:    _UserProgressService_GetUserAchievements_Handler,
		},
		{
			MethodName: "UnlockAchievement",
			Handler:    _UserProgressService_UnlockAchievement_Handler,
		},
		{
			MethodName: "GetLearningPath",
			Handler:    _UserProgressService_GetLearningPath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_progress.proto",
}
