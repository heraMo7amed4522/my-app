// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/stories.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StoriesService_CreateStory_FullMethodName      = "/stories.StoriesService/CreateStory"
	StoriesService_GetStoryById_FullMethodName     = "/stories.StoriesService/GetStoryById"
	StoriesService_GetStoriesByUser_FullMethodName = "/stories.StoriesService/GetStoriesByUser"
	StoriesService_GetAllStories_FullMethodName    = "/stories.StoriesService/GetAllStories"
	StoriesService_UpdateStory_FullMethodName      = "/stories.StoriesService/UpdateStory"
	StoriesService_DeleteStory_FullMethodName      = "/stories.StoriesService/DeleteStory"
	StoriesService_PublishStory_FullMethodName     = "/stories.StoriesService/PublishStory"
	StoriesService_ReactToStory_FullMethodName     = "/stories.StoriesService/ReactToStory"
)

// StoriesServiceClient is the client API for StoriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoriesServiceClient interface {
	CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error)
	GetStoryById(ctx context.Context, in *GetStoryByIdRequest, opts ...grpc.CallOption) (*GetStoryByIdResponse, error)
	GetStoriesByUser(ctx context.Context, in *GetStoriesByUserRequest, opts ...grpc.CallOption) (*GetStoriesByUserResponse, error)
	GetAllStories(ctx context.Context, in *GetAllStoriesRequest, opts ...grpc.CallOption) (*GetAllStoriesResponse, error)
	UpdateStory(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error)
	DeleteStory(ctx context.Context, in *DeleteStoryRequest, opts ...grpc.CallOption) (*DeleteStoryResponse, error)
	PublishStory(ctx context.Context, in *PublishStoryRequest, opts ...grpc.CallOption) (*PublishStoryResponse, error)
	ReactToStory(ctx context.Context, in *ReactToStoryRequest, opts ...grpc.CallOption) (*ReactToStoryResponse, error)
}

type storiesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoriesServiceClient(cc grpc.ClientConnInterface) StoriesServiceClient {
	return &storiesServiceClient{cc}
}

func (c *storiesServiceClient) CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStoryResponse)
	err := c.cc.Invoke(ctx, StoriesService_CreateStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesServiceClient) GetStoryById(ctx context.Context, in *GetStoryByIdRequest, opts ...grpc.CallOption) (*GetStoryByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoryByIdResponse)
	err := c.cc.Invoke(ctx, StoriesService_GetStoryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesServiceClient) GetStoriesByUser(ctx context.Context, in *GetStoriesByUserRequest, opts ...grpc.CallOption) (*GetStoriesByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoriesByUserResponse)
	err := c.cc.Invoke(ctx, StoriesService_GetStoriesByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesServiceClient) GetAllStories(ctx context.Context, in *GetAllStoriesRequest, opts ...grpc.CallOption) (*GetAllStoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllStoriesResponse)
	err := c.cc.Invoke(ctx, StoriesService_GetAllStories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesServiceClient) UpdateStory(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStoryResponse)
	err := c.cc.Invoke(ctx, StoriesService_UpdateStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesServiceClient) DeleteStory(ctx context.Context, in *DeleteStoryRequest, opts ...grpc.CallOption) (*DeleteStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStoryResponse)
	err := c.cc.Invoke(ctx, StoriesService_DeleteStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesServiceClient) PublishStory(ctx context.Context, in *PublishStoryRequest, opts ...grpc.CallOption) (*PublishStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishStoryResponse)
	err := c.cc.Invoke(ctx, StoriesService_PublishStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesServiceClient) ReactToStory(ctx context.Context, in *ReactToStoryRequest, opts ...grpc.CallOption) (*ReactToStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReactToStoryResponse)
	err := c.cc.Invoke(ctx, StoriesService_ReactToStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoriesServiceServer is the server API for StoriesService service.
// All implementations must embed UnimplementedStoriesServiceServer
// for forward compatibility.
type StoriesServiceServer interface {
	CreateStory(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error)
	GetStoryById(context.Context, *GetStoryByIdRequest) (*GetStoryByIdResponse, error)
	GetStoriesByUser(context.Context, *GetStoriesByUserRequest) (*GetStoriesByUserResponse, error)
	GetAllStories(context.Context, *GetAllStoriesRequest) (*GetAllStoriesResponse, error)
	UpdateStory(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error)
	DeleteStory(context.Context, *DeleteStoryRequest) (*DeleteStoryResponse, error)
	PublishStory(context.Context, *PublishStoryRequest) (*PublishStoryResponse, error)
	ReactToStory(context.Context, *ReactToStoryRequest) (*ReactToStoryResponse, error)
	mustEmbedUnimplementedStoriesServiceServer()
}

// UnimplementedStoriesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStoriesServiceServer struct{}

func (UnimplementedStoriesServiceServer) CreateStory(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStory not implemented")
}
func (UnimplementedStoriesServiceServer) GetStoryById(context.Context, *GetStoryByIdRequest) (*GetStoryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryById not implemented")
}
func (UnimplementedStoriesServiceServer) GetStoriesByUser(context.Context, *GetStoriesByUserRequest) (*GetStoriesByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoriesByUser not implemented")
}
func (UnimplementedStoriesServiceServer) GetAllStories(context.Context, *GetAllStoriesRequest) (*GetAllStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStories not implemented")
}
func (UnimplementedStoriesServiceServer) UpdateStory(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStory not implemented")
}
func (UnimplementedStoriesServiceServer) DeleteStory(context.Context, *DeleteStoryRequest) (*DeleteStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStory not implemented")
}
func (UnimplementedStoriesServiceServer) PublishStory(context.Context, *PublishStoryRequest) (*PublishStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishStory not implemented")
}
func (UnimplementedStoriesServiceServer) ReactToStory(context.Context, *ReactToStoryRequest) (*ReactToStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactToStory not implemented")
}
func (UnimplementedStoriesServiceServer) mustEmbedUnimplementedStoriesServiceServer() {}
func (UnimplementedStoriesServiceServer) testEmbeddedByValue()                        {}

// UnsafeStoriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoriesServiceServer will
// result in compilation errors.
type UnsafeStoriesServiceServer interface {
	mustEmbedUnimplementedStoriesServiceServer()
}

func RegisterStoriesServiceServer(s grpc.ServiceRegistrar, srv StoriesServiceServer) {
	// If the following call pancis, it indicates UnimplementedStoriesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StoriesService_ServiceDesc, srv)
}

func _StoriesService_CreateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesServiceServer).CreateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoriesService_CreateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesServiceServer).CreateStory(ctx, req.(*CreateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoriesService_GetStoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesServiceServer).GetStoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoriesService_GetStoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesServiceServer).GetStoryById(ctx, req.(*GetStoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoriesService_GetStoriesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoriesByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesServiceServer).GetStoriesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoriesService_GetStoriesByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesServiceServer).GetStoriesByUser(ctx, req.(*GetStoriesByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoriesService_GetAllStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesServiceServer).GetAllStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoriesService_GetAllStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesServiceServer).GetAllStories(ctx, req.(*GetAllStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoriesService_UpdateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesServiceServer).UpdateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoriesService_UpdateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesServiceServer).UpdateStory(ctx, req.(*UpdateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoriesService_DeleteStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesServiceServer).DeleteStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoriesService_DeleteStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesServiceServer).DeleteStory(ctx, req.(*DeleteStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoriesService_PublishStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesServiceServer).PublishStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoriesService_PublishStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesServiceServer).PublishStory(ctx, req.(*PublishStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoriesService_ReactToStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactToStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesServiceServer).ReactToStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoriesService_ReactToStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesServiceServer).ReactToStory(ctx, req.(*ReactToStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoriesService_ServiceDesc is the grpc.ServiceDesc for StoriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stories.StoriesService",
	HandlerType: (*StoriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStory",
			Handler:    _StoriesService_CreateStory_Handler,
		},
		{
			MethodName: "GetStoryById",
			Handler:    _StoriesService_GetStoryById_Handler,
		},
		{
			MethodName: "GetStoriesByUser",
			Handler:    _StoriesService_GetStoriesByUser_Handler,
		},
		{
			MethodName: "GetAllStories",
			Handler:    _StoriesService_GetAllStories_Handler,
		},
		{
			MethodName: "UpdateStory",
			Handler:    _StoriesService_UpdateStory_Handler,
		},
		{
			MethodName: "DeleteStory",
			Handler:    _StoriesService_DeleteStory_Handler,
		},
		{
			MethodName: "PublishStory",
			Handler:    _StoriesService_PublishStory_Handler,
		},
		{
			MethodName: "ReactToStory",
			Handler:    _StoriesService_ReactToStory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/stories.proto",
}
