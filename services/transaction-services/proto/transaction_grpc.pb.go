// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/transaction.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionService_GetTransactionByID_FullMethodName     = "/transaction.TransactionService/GetTransactionByID"
	TransactionService_GetTransactionByUserID_FullMethodName = "/transaction.TransactionService/GetTransactionByUserID"
	TransactionService_GetTransactionByCardID_FullMethodName = "/transaction.TransactionService/GetTransactionByCardID"
	TransactionService_GetTransactionByStatus_FullMethodName = "/transaction.TransactionService/GetTransactionByStatus"
	TransactionService_GetTransactionByDate_FullMethodName   = "/transaction.TransactionService/GetTransactionByDate"
)

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	GetTransactionByID(ctx context.Context, in *GetTransactionByIDRequest, opts ...grpc.CallOption) (*GetTransactionByIDResponse, error)
	GetTransactionByUserID(ctx context.Context, in *GetTransactionByUserIDRequest, opts ...grpc.CallOption) (*GetTransactionByUserIDResponse, error)
	GetTransactionByCardID(ctx context.Context, in *GetTransactionByCardIDRequest, opts ...grpc.CallOption) (*GetTransactionByCardIDResponse, error)
	GetTransactionByStatus(ctx context.Context, in *GetTransactionByStatusRequest, opts ...grpc.CallOption) (*GetTransactionByStatusResponse, error)
	GetTransactionByDate(ctx context.Context, in *GetTransactionByDateRequest, opts ...grpc.CallOption) (*GetTransactionByDateResponse, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) GetTransactionByID(ctx context.Context, in *GetTransactionByIDRequest, opts ...grpc.CallOption) (*GetTransactionByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionByIDResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionByUserID(ctx context.Context, in *GetTransactionByUserIDRequest, opts ...grpc.CallOption) (*GetTransactionByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionByUserIDResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionByCardID(ctx context.Context, in *GetTransactionByCardIDRequest, opts ...grpc.CallOption) (*GetTransactionByCardIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionByCardIDResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionByCardID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionByStatus(ctx context.Context, in *GetTransactionByStatusRequest, opts ...grpc.CallOption) (*GetTransactionByStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionByStatusResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionByStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionByDate(ctx context.Context, in *GetTransactionByDateRequest, opts ...grpc.CallOption) (*GetTransactionByDateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionByDateResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionByDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations must embed UnimplementedTransactionServiceServer
// for forward compatibility.
type TransactionServiceServer interface {
	GetTransactionByID(context.Context, *GetTransactionByIDRequest) (*GetTransactionByIDResponse, error)
	GetTransactionByUserID(context.Context, *GetTransactionByUserIDRequest) (*GetTransactionByUserIDResponse, error)
	GetTransactionByCardID(context.Context, *GetTransactionByCardIDRequest) (*GetTransactionByCardIDResponse, error)
	GetTransactionByStatus(context.Context, *GetTransactionByStatusRequest) (*GetTransactionByStatusResponse, error)
	GetTransactionByDate(context.Context, *GetTransactionByDateRequest) (*GetTransactionByDateResponse, error)
	mustEmbedUnimplementedTransactionServiceServer()
}

// UnimplementedTransactionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionServiceServer struct{}

func (UnimplementedTransactionServiceServer) GetTransactionByID(context.Context, *GetTransactionByIDRequest) (*GetTransactionByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByID not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionByUserID(context.Context, *GetTransactionByUserIDRequest) (*GetTransactionByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByUserID not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionByCardID(context.Context, *GetTransactionByCardIDRequest) (*GetTransactionByCardIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByCardID not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionByStatus(context.Context, *GetTransactionByStatusRequest) (*GetTransactionByStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByStatus not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionByDate(context.Context, *GetTransactionByDateRequest) (*GetTransactionByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByDate not implemented")
}
func (UnimplementedTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {}
func (UnimplementedTransactionServiceServer) testEmbeddedByValue()                            {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_GetTransactionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionByID(ctx, req.(*GetTransactionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionByUserID(ctx, req.(*GetTransactionByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionByCardID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByCardIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionByCardID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionByCardID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionByCardID(ctx, req.(*GetTransactionByCardIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionByStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionByStatus(ctx, req.(*GetTransactionByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionByDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionByDate(ctx, req.(*GetTransactionByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionByID",
			Handler:    _TransactionService_GetTransactionByID_Handler,
		},
		{
			MethodName: "GetTransactionByUserID",
			Handler:    _TransactionService_GetTransactionByUserID_Handler,
		},
		{
			MethodName: "GetTransactionByCardID",
			Handler:    _TransactionService_GetTransactionByCardID_Handler,
		},
		{
			MethodName: "GetTransactionByStatus",
			Handler:    _TransactionService_GetTransactionByStatus_Handler,
		},
		{
			MethodName: "GetTransactionByDate",
			Handler:    _TransactionService_GetTransactionByDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/transaction.proto",
}
