// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/card.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CardService_GetCardByID_FullMethodName      = "/cards.CardService/GetCardByID"
	CardService_CreateNewCard_FullMethodName    = "/cards.CardService/CreateNewCard"
	CardService_UpdateCardData_FullMethodName   = "/cards.CardService/UpdateCardData"
	CardService_DeleteCardData_FullMethodName   = "/cards.CardService/DeleteCardData"
	CardService_UpdateCardStatus_FullMethodName = "/cards.CardService/UpdateCardStatus"
	CardService_GetCardByUserID_FullMethodName  = "/cards.CardService/GetCardByUserID"
	CardService_SearchCard_FullMethodName       = "/cards.CardService/SearchCard"
	CardService_FindCardByStatus_FullMethodName = "/cards.CardService/FindCardByStatus"
)

// CardServiceClient is the client API for CardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardServiceClient interface {
	GetCardByID(ctx context.Context, in *GetCardByIDRequest, opts ...grpc.CallOption) (*GetCardByIDResponse, error)
	CreateNewCard(ctx context.Context, in *CreateNewCardRequest, opts ...grpc.CallOption) (*CreateNewCardResponse, error)
	UpdateCardData(ctx context.Context, in *UpdateCardDataRequest, opts ...grpc.CallOption) (*UpdateCardDataResponse, error)
	DeleteCardData(ctx context.Context, in *DeleteCardDataRequest, opts ...grpc.CallOption) (*DeleteCardDataResponse, error)
	UpdateCardStatus(ctx context.Context, in *UpdateCardStatusRequest, opts ...grpc.CallOption) (*UpdateCardStatusResponse, error)
	GetCardByUserID(ctx context.Context, in *GetCardByUserIDRequest, opts ...grpc.CallOption) (*GetCardByUserIDResponse, error)
	SearchCard(ctx context.Context, in *SearchCardRequest, opts ...grpc.CallOption) (*SearchCardResponse, error)
	FindCardByStatus(ctx context.Context, in *FindCardByStatusRequest, opts ...grpc.CallOption) (*FindCardByStatusResponse, error)
}

type cardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardServiceClient(cc grpc.ClientConnInterface) CardServiceClient {
	return &cardServiceClient{cc}
}

func (c *cardServiceClient) GetCardByID(ctx context.Context, in *GetCardByIDRequest, opts ...grpc.CallOption) (*GetCardByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCardByIDResponse)
	err := c.cc.Invoke(ctx, CardService_GetCardByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) CreateNewCard(ctx context.Context, in *CreateNewCardRequest, opts ...grpc.CallOption) (*CreateNewCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNewCardResponse)
	err := c.cc.Invoke(ctx, CardService_CreateNewCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) UpdateCardData(ctx context.Context, in *UpdateCardDataRequest, opts ...grpc.CallOption) (*UpdateCardDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCardDataResponse)
	err := c.cc.Invoke(ctx, CardService_UpdateCardData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) DeleteCardData(ctx context.Context, in *DeleteCardDataRequest, opts ...grpc.CallOption) (*DeleteCardDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCardDataResponse)
	err := c.cc.Invoke(ctx, CardService_DeleteCardData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) UpdateCardStatus(ctx context.Context, in *UpdateCardStatusRequest, opts ...grpc.CallOption) (*UpdateCardStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCardStatusResponse)
	err := c.cc.Invoke(ctx, CardService_UpdateCardStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardByUserID(ctx context.Context, in *GetCardByUserIDRequest, opts ...grpc.CallOption) (*GetCardByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCardByUserIDResponse)
	err := c.cc.Invoke(ctx, CardService_GetCardByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) SearchCard(ctx context.Context, in *SearchCardRequest, opts ...grpc.CallOption) (*SearchCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchCardResponse)
	err := c.cc.Invoke(ctx, CardService_SearchCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) FindCardByStatus(ctx context.Context, in *FindCardByStatusRequest, opts ...grpc.CallOption) (*FindCardByStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindCardByStatusResponse)
	err := c.cc.Invoke(ctx, CardService_FindCardByStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServiceServer is the server API for CardService service.
// All implementations must embed UnimplementedCardServiceServer
// for forward compatibility.
type CardServiceServer interface {
	GetCardByID(context.Context, *GetCardByIDRequest) (*GetCardByIDResponse, error)
	CreateNewCard(context.Context, *CreateNewCardRequest) (*CreateNewCardResponse, error)
	UpdateCardData(context.Context, *UpdateCardDataRequest) (*UpdateCardDataResponse, error)
	DeleteCardData(context.Context, *DeleteCardDataRequest) (*DeleteCardDataResponse, error)
	UpdateCardStatus(context.Context, *UpdateCardStatusRequest) (*UpdateCardStatusResponse, error)
	GetCardByUserID(context.Context, *GetCardByUserIDRequest) (*GetCardByUserIDResponse, error)
	SearchCard(context.Context, *SearchCardRequest) (*SearchCardResponse, error)
	FindCardByStatus(context.Context, *FindCardByStatusRequest) (*FindCardByStatusResponse, error)
	mustEmbedUnimplementedCardServiceServer()
}

// UnimplementedCardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardServiceServer struct{}

func (UnimplementedCardServiceServer) GetCardByID(context.Context, *GetCardByIDRequest) (*GetCardByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardByID not implemented")
}
func (UnimplementedCardServiceServer) CreateNewCard(context.Context, *CreateNewCardRequest) (*CreateNewCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewCard not implemented")
}
func (UnimplementedCardServiceServer) UpdateCardData(context.Context, *UpdateCardDataRequest) (*UpdateCardDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCardData not implemented")
}
func (UnimplementedCardServiceServer) DeleteCardData(context.Context, *DeleteCardDataRequest) (*DeleteCardDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCardData not implemented")
}
func (UnimplementedCardServiceServer) UpdateCardStatus(context.Context, *UpdateCardStatusRequest) (*UpdateCardStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCardStatus not implemented")
}
func (UnimplementedCardServiceServer) GetCardByUserID(context.Context, *GetCardByUserIDRequest) (*GetCardByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardByUserID not implemented")
}
func (UnimplementedCardServiceServer) SearchCard(context.Context, *SearchCardRequest) (*SearchCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCard not implemented")
}
func (UnimplementedCardServiceServer) FindCardByStatus(context.Context, *FindCardByStatusRequest) (*FindCardByStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCardByStatus not implemented")
}
func (UnimplementedCardServiceServer) mustEmbedUnimplementedCardServiceServer() {}
func (UnimplementedCardServiceServer) testEmbeddedByValue()                     {}

// UnsafeCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServiceServer will
// result in compilation errors.
type UnsafeCardServiceServer interface {
	mustEmbedUnimplementedCardServiceServer()
}

func RegisterCardServiceServer(s grpc.ServiceRegistrar, srv CardServiceServer) {
	// If the following call pancis, it indicates UnimplementedCardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardService_ServiceDesc, srv)
}

func _CardService_GetCardByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCardByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardByID(ctx, req.(*GetCardByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_CreateNewCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).CreateNewCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_CreateNewCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).CreateNewCard(ctx, req.(*CreateNewCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_UpdateCardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).UpdateCardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_UpdateCardData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).UpdateCardData(ctx, req.(*UpdateCardDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_DeleteCardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).DeleteCardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_DeleteCardData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).DeleteCardData(ctx, req.(*DeleteCardDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_UpdateCardStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).UpdateCardStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_UpdateCardStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).UpdateCardStatus(ctx, req.(*UpdateCardStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCardByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardByUserID(ctx, req.(*GetCardByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_SearchCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).SearchCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_SearchCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).SearchCard(ctx, req.(*SearchCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_FindCardByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCardByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).FindCardByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_FindCardByStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).FindCardByStatus(ctx, req.(*FindCardByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardService_ServiceDesc is the grpc.ServiceDesc for CardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cards.CardService",
	HandlerType: (*CardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCardByID",
			Handler:    _CardService_GetCardByID_Handler,
		},
		{
			MethodName: "CreateNewCard",
			Handler:    _CardService_CreateNewCard_Handler,
		},
		{
			MethodName: "UpdateCardData",
			Handler:    _CardService_UpdateCardData_Handler,
		},
		{
			MethodName: "DeleteCardData",
			Handler:    _CardService_DeleteCardData_Handler,
		},
		{
			MethodName: "UpdateCardStatus",
			Handler:    _CardService_UpdateCardStatus_Handler,
		},
		{
			MethodName: "GetCardByUserID",
			Handler:    _CardService_GetCardByUserID_Handler,
		},
		{
			MethodName: "SearchCard",
			Handler:    _CardService_SearchCard_Handler,
		},
		{
			MethodName: "FindCardByStatus",
			Handler:    _CardService_FindCardByStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/card.proto",
}
